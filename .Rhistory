y = st_coordinates(bozen)[,2] + 0.1
#modify the x and y coordinates of the new point
bozen2 = data.frame(x,y) %>% st_as_sf(crs=st_crs(bozen), coords=c(1,2), bbox=st_bbox(bozen))
#modify the x and y coordinates of the new point
bozen2 = data.frame(x,y) %>% st_as_sf()
#modify the x and y coordinates of the new point
bozen2 = data.frame(x,y) %>% st_as_sf(coords=c(1,2))
bozen2
mapview::mapview(bozen) + mapview::mapview(bozen2)
res2 = get_rainfall(data_path = path_ncdf,
spatial.obj = bozen2,
dts = dts,
seqq = seqq,
days_back = days_back)
bozen2
#modify the x and y coordinates of the new point
bozen2 = data.frame(x,y) %>% st_as_sf(coords=c(1,2)) %>% st_crs(st_crs(bozen))
#modify the x and y coordinates of the new point
bozen2
#modify the x and y coordinates of the new point
bozen2 = data.frame(x,y) %>% st_as_sf(coords=c(1,2), crs=st_crs(bozen))
bozen2
res2 = get_rainfall(data_path = path_ncdf,
spatial.obj = bozen2,
dts = dts,
seqq = seqq,
days_back = days_back)
?echo
res2
bozen2
# bind them together
bozen2 = rbind(bozen, bozen2)
bozen2
res2 = get_rainfall(data_path = path_ncdf,
spatial.obj = bozen2,
dts = dts,
seqq = seqq,
days_back = days_back)
res2
res2_long = rainfallR::make_cumulative_rainfall(res2)
res = res2
nrow(res[[1]]) == 1
out = vector("list", length = length(res))
i = 1
# make one dataframe
df = res[[i]]
df
# iffi in names
iffi = ifelse("iffi" %in% names(df), TRUE, FALSE)
# if there is no iffi-identifier we need another unique identifier per row
# add a unique id
if(!iffi) df[["id"]] = 1:nrow(df)
devtools::load_all()
res2_long = rainfallR::make_cumulative_rainfall(res2)
res2_long
head(df_long)
ggplot(df_long) +
geom_col(aes(x=date, y=cumsum)) +
theme_light()
df_long$cumsum
head(df_long)
dim(df_long)
dim(df_long)
res
spatial.obj
res = get_rainfall(data_path = path_ncdf,
spatial.obj = spatial.obj,
dts = dts,
seqq = seqq,
days_back = days_back)
res
res_long = rainfallR::make_cumulative_rainfall(res)
dim(res_long)
res_long = rainfallR::make_cumulative_rainfall(res)
class(res_long)
dim(res_long[[1]])
View(df_long)
View(df_long)
res_long = rainfallR::make_cumulative_rainfall(res)
res_long
a =do.call("rbind", res_long)
class(a)
head(a)
unnest(res_long)
a = bind_rows(res_long)
head(a)
?bind_rows
a = bind_rows(res_long, .id = name(.))
unnest(res_long)
unnest(res_long, cols=everything())
?unnest
# bind all the dates_togehter and make the name a column to identify
df_long = data.frame()
names(df_long) = names(res_long)
# initalizes an empty df
df_long = data.frame(matrix(ncol = length(res_long)))
head(df_long)
head(res_long)
# initalizes an empty df
df_long = data.frame(matrix(ncol = length(names(res_long)[[1]])))
head(df_long)
# initalizes an empty df
df_long = data.frame(matrix(ncol = length(names(res_long[[1]])))))
# initalizes an empty df
df_long = data.frame(matrix(ncol = length(names(res_long[[1]]))))
head(df_long)
names(df_long) = names(res_long[[1]])
head(df_long)
names(df_long) = names(res_long[[1]])
# initalizes an empty df
df_long = data.frame(matrix(ncol = length(names(res_long[[1]]))))
names(df_long) = names(res_long[[1]])
for (day in seq_along(res_long)) {
df_long = rbind(df_long, res_long[[day]])
}
dim(df_long)
head(df_long)
# initalizes an empty df
df_long = data.frame(matrix(ncol = length(names(res_long[[1]]))))
names(df_long) = names(res_long[[1]])
head(df_long)
for (day in seq_along(res_long)) {
df_long = rbind(df_long, res_long[[day]])
df_long$date_consideration = names(res_long)[[day]]
}
names(res_long)
# initalizes an empty df
df_long = data.frame(matrix(ncol = length(names(res_long[[1]]))))
names(df_long) = names(res_long[[1]])
for (day in seq_along(res_long)) {
df_long = rbind(df_long, res_long[[day]])
df_long[["d"]] = names(res_long)[[day]]
}
# initalizes an empty df
df_long = data.frame()
names(df_long) = names(res_long[[1]])
# initalizes an empty df
df_long = data.frame(a = NULL, b=NULL, c=NULL, d=NULL, e=NULL)
head(df_long)
names(df_long) = names(res_long[[1]])
# initalizes an empty df
df_long = res_long[[1]]
df_long$date_consid = names(res_long)[[1]]
head(df_long)
# initalizes an empty df
df_long = res_long[[1]]
df_long$date_consid = names(res_long)[[1]]
for (day in seq_along(res_long)) {
# skip the first one
if(day!=1){
df_long = rbind(df_long, res_long[[day]])
df_long[["d"]] = names(res_long)[[day]]
}
}
# initalizes an empty df
df_long = res_long[[1]]
df_long$date_consid = names(res_long)[[1]]
dim(df_long)
day=2
df = res_long[[day]]
df$date_consid = names(res_long)[[day]]
# initalizes an empty df
df_long = res_long[[1]]
df_long$date_consid = names(res_long)[[1]]
for (day in seq_along(res_long)) {
# skip the first one
if(day!=1){
df = res_long[[day]]
df$date_consid = names(res_long)[[day]]
df_long = rbind(df_long, df)
}
}
dim(df)
dim(df_long)
head(df_long)
ggplot(df_long) +
geom_histogram(aes(x=date, y=cumsum)) +
ggplot(df_long) +
geom_histogram(aes(x=date, y=cumsum))
class(df_long)
ggplot(df_long) +
geom_histogram(aes(x=date, y=cumsum))
ggplot(df_long) +
geom_col(aes(x=date, y=cumsum))
ggplot(df_long) +
geom_col(aes(x=date, y=cumsum, fill=date_consid))
ggplot(df_long) +
geom_col(aes(x=date, y=cumsum, fill=date_consid), position = "dodge")
View(df_long)
ggplot(df_long) +
geom_line(aes(x=date, y=cumsum, fill=date_consid))
ggplot(df_long) +
geom_line(aes(x=date, y=cumsum, group=date_consid))
ggplot(df_long) +
geom_line(aes(x=date, y=cumsum, col=date_consid))
ggplot(df_long) +
geom_col(aes(x=date, y=cumsum, col=date_consid))
ggplot(df_long) +
geom_col(aes(x=date, y=cumsum))
ggplot(df_long) +
geom_col(aes(x=date, y=cumsum)) +
facet_wrap(~ddate_consid)
ggplot(df_long) +
geom_col(aes(x=date, y=cumsum)) +
facet_wrap(~date_consid)
ggplot(df_long) +
geom_col(aes(x=date, y=cumsum)) +
facet_wrap(~date_consid) +
theme_light()
ggplot(df_long) +
geom_col(aes(x=date, y=cumsum)) +
facet_wrap(~date_consid) +
theme_light() +
labs(y="Cumulative Antecedent Rainfall in Bozen")
# initalizes an empty df
df_long2 = res_long2[[1]]
# initalizes an empty df
df_long2 = res2_long[[1]]
df_long2$date_consid = names(res2_long)[[1]]
head(df_long)
res2_long
names(res2_long)[[1]]
class(res2_long)[[1]]
names(res2_long[[1]])
# initalizes an empty df
df_long2 = res2_long[[1]]
head(df_long2)
# initalizes an empty df
df_long = res_long[[1]]
df_long$date_consid = names(res_long[[1]])
# initalizes an empty df
df_long = res_long[[1]]
df_long$date_consid = names(res_long)[[1]]
# initalizes an empty df
df_long2 = res2_long[[1]]
names(res2_long)
res2_long = rainfallR::make_cumulative_rainfall(res2)
names(res2_long)
res2_long
res2_long
res
devtools::load_all()
res2_long = rainfallR::make_cumulative_rainfall(res2)
names(res2_long)
# initalizes an empty df
df_long2 = res2_long[[1]]
df_long2$date_consid = names(res2_long)[[1]]
head(df_long2)
# initalizes an empty df
df_long2 = res2_long[[1]]
df_long2$date_consid = names(res2_long)[[1]]
for (day in seq_along(res_long)) {
# skip the first one
if(day!=1){
df = res_long[[day]]
df$date_consid = names(res_long)[[day]]
df_long = rbind(df_long, df)
}
}
dim(df_long2)
# initalizes an empty df
df_long2 = res2_long[[1]]
df_long2$date_consid = names(res2_long)[[1]]
for (day in seq_along(res2_long)) {
# skip the first one
if(day!=1){
df = res_long[[day]]
df$date_consid = names(res_long)[[day]]
df_long = rbind(df_long, df)
}
}
dim(df_long2)
# initalizes an empty df
df_long2 = res2_long[[1]]
df_long2$date_consid = names(res2_long)[[1]]
for (day in seq_along(res2_long)) {
# skip the first one
if(day!=1){
df = res_long[[day]]
df$date_consid = names(res_long)[[day]]
df_long2 = rbind(df_long, df)
}
}
# initalizes an empty df
df_long2 = res2_long[[1]]
df_long2$date_consid = names(res2_long)[[1]]
for (day in seq_along(res2_long)) {
# skip the first one
if(day!=1){
df = res2_long[[day]]
df$date_consid = names(res2_long)[[day]]
df_long2 = rbind(df_long2, df)
}
}
dim(df_long2)
ggplot(df_long2) +
geom_col(aes(x=date, y=cumsum, fill=id)) +
facet_wrap(~date_consid) +
theme_light() +
labs(y="Cumulative Antecedent Rainfall in Bozen")
ggplot(df_long2) +
geom_col(aes(x=date, y=cumsum, fill=id), position="dodge") +
facet_wrap(~date_consid) +
theme_light() +
labs(y="Cumulative Antecedent Rainfall in Bozen")
ggplot(df_long2) +
geom_col(aes(x=date, y=cumsum, fill=as.factor(id)), position="dodge") +
facet_wrap(~date_consid) +
theme_light() +
labs(y="Cumulative Antecedent Rainfall in Bozen")
- where did the second point land?
```{r}
data(World)
tmap_mode("view")
tm_shape(bozen2) +
tm_dots()
dts
y = dts[[1]] %>% format("%Y")
y
m = dts[[1]] %>% format("%m")
# make the path to the raster on the eurac server
path = rainfallR::get_nc_paths(data_path = path_ncdf, day = dts[[1]])
# make the path to the raster on the eurac server
path = rainfallR::get_nc_paths(data_path = path_ncdf, day = dts[[1]], days_back = 5)
path
# make the path to the raster on the eurac server
path_raster = rainfallR::get_nc_paths(data_path = path_ncdf, day = dts[[1]], days_back = 5)
raster_brick = raster::brick(path_raster)
raster_brick
suppressWarnings(raster_brick = raster::brick(path_raster))
suppressWarnings(raster_brick = raster::brick(path_raster))
selected_raster = raster_brick[days]
selected_raster = raster_brick[,,days]
selected_raster
class(selected_raster)
selected_raster = subset(raster_brick, days)
# select the 12th, 13th and 14th day
days = c(12,13,14)
selected_raster = subset(raster_brick, days)
selected_raster
# transform the stack and the polygon
selected_raster = projectRaster(selected_raster, crs="+proj=longlat +ellps=WGS84 +datum=WGS84 +no_defs")
bozen2 = st_transform(bozen2, 4326)
leaflet() %>%
addTiles() %>%
addPolygons(data=bozen2, group = "shape") %>%
addRasterImage(selected_raster, group="precip", colors=pal)
# read it with sf
spatial.obj = read_sf(poly_path)
# get only one landslide
spatial.obj = spatial.obj[1,]
# get the path to the nc file
path_to_nc = rainfallR::get_nc_paths(path_ncdf, day = as.Date("2016-01-12"), days_back = 1)[[1]]
# get the raster
precip_raster_stack = raster::stack(path_to_nc)
# get the raster
precip_raster_stack = raster::stack(path_to_nc)
# get the right date
precip_raster = precip_raster_stack[[12]]
# transform the
spatial.obj4326 = st_transform(spatial.obj, 4326)
# transform the raster
precip_raster = projectRaster(precip_raster, crs="+proj=longlat +ellps=WGS84 +datum=WGS84 +no_defs")
# what have we got?
pal = colorNumeric(c("#0C2C84", "#41B6C4", "#FFFFCC"), values(precip_raster),
na.color = "transparent")
# what have we got?
pal = colorNumeric(c("#0C2C84", "#41B6C4", "#FFFFCC"), values(precip_raster),
na.color = "transparent")
leaflet() %>%
addTiles() %>%
setView(lng = st_coordinates(spatial.obj4326)[,1][[1]],
lat = st_coordinates(spatial.obj4326)[,2][[1]],
zoom=15) %>%
addPolygons(data = spatial.obj4326, group="shape") %>%
addRasterImage(precip_raster, group = "precip", colors=pal) %>%
addLegend(pal=pal, values=values(precip_raster)) %>%
addLayersControl(overlayGroups = c("shape", "precip")) %>%
hideGroup("precip")
bz_sp = as(bozen2, Class="SPATIAL")
bz_sp = as(bozen2, Class="Spatial")
leaflet() %>%
addTiles() %>%
addPolygons(data=bz_sp, group = "shape") %>%
addRasterImage(selected_raster, group="precip", colors=pal)
leaflet() %>%
addTiles() %>%
addCircles(data=bozen2, group = "shape") %>%
addRasterImage(selected_raster, group="precip", colors=pal)
leaflet() %>%
addTiles() %>%
addCircles(data=bozen2, group = "shape") %>%
addRasterImage(selected_raster[[1]], group="precip", colors=pal)
dts
groups_rasters = seq(dts[[1]], dts[[2]], by="day")
groups_rasters
groups_rasters = seq(dts[[1]], dts[[2]], by="day") %>% sapply(., as.character)
groups_rasters
leaflet() %>%
addTiles() %>%
addCircles(data=bozen2, group = "shape") %>%
addRasterImage(selected_raster[[1]], group=groups_rasters[[1]], colors=pal)
leaflet() %>%
addTiles() %>%
addCircles(data=bozen2, group = "shape") %>%
addRasterImage(selected_raster[[1]], group=groups_rasters[[1]], colors=pal) %>%
addRasterImage(selected_raster[[2]], group=groups_rasters[[2]], colors=pal) %>%
addRasterImage(selected_raster[[3]], group=groups_rasters[[3]], colors=pal) %>%
addLegend(pal=pal, values=values(precip_raster[[1]])) %>%
addLayersControl(overlayGroups = c("shape", groups_rasters)) %>%
hideGroup(groups_rasters)
leaflet() %>%
addTiles() %>%
addCircles(data=bozen2, group = "shape") %>%
# addRasterImage(selected_raster[[1]], group=groups_rasters[[1]], colors=pal) %>%
addRasterImage(selected_raster[[2]], group=groups_rasters[[2]], colors=pal) %>%
addRasterImage(selected_raster[[3]], group=groups_rasters[[3]], colors=pal) %>%
addLegend(pal=pal, values=values(precip_raster[[1]])) %>%
addLayersControl(overlayGroups = c("shape", groups_rasters)) %>%
hideGroup(groups_rasters)
selected_raster[[2]]
selected_raster[2]
# what have we got?
pal = colorNumeric(c("#0C2C84", "#41B6C4", "#FFFFCC"), values(selected_raster[[1]]),
na.color = "transparent")
bz_sp = as(bozen2, Class="Spatial")
groups_rasters = seq(dts[[1]], dts[[2]], by="day") %>% sapply(., as.character)
leaflet() %>%
addTiles() %>%
addCircles(data=bozen2, group = "shape") %>%
# addRasterImage(selected_raster[[1]], group=groups_rasters[[1]], colors=pal) %>%
addRasterImage(selected_raster[[2]], group=groups_rasters[[2]], colors=pal) %>%
addRasterImage(selected_raster[[3]], group=groups_rasters[[3]], colors=pal) %>%
addLegend(pal=pal, values=values(precip_raster[[1]])) %>%
addLayersControl(overlayGroups = c("shape", groups_rasters)) %>%
hideGroup(groups_rasters)
p1 = selected_raster[[1]]
p2 = selected_raster[[2]]
leaflet() %>%
addTiles() %>%
addCircles(data=bozen2, group = "shape") %>%
addRasterImage(p1, group=groups_rasters[[1]], colors=pal) %>%
addRasterImage(p2, group=groups_rasters[[2]], colors=pal) %>%
addRasterImage(p3, group=groups_rasters[[3]], colors=pal) %>%
addLayersControl(overlayGroups = c("shape", groups_rasters)) %>%
hideGroup(groups_rasters)
p3 = selected_raster[[3]]
leaflet() %>%
addTiles() %>%
addCircles(data=bozen2, group = "shape") %>%
addRasterImage(p1, group=groups_rasters[[1]], colors=pal) %>%
addRasterImage(p2, group=groups_rasters[[2]], colors=pal) %>%
addRasterImage(p3, group=groups_rasters[[3]], colors=pal) %>%
addLayersControl(overlayGroups = c("shape", groups_rasters)) %>%
hideGroup(groups_rasters)
selected_raster[[2]]
plot(selected_raster[[2]])
leaflet() %>%
addTiles() %>%
addCircles(data=bozen2, group = "shape") %>%
addRasterImage(p1, group="a", colors=pal) %>%
addRasterImage(p2, group="b", colors=pal) %>%
addRasterImage(p3, group="c", colors=pal) %>%
addLayersControl(overlayGroups = c("shape", "a", "b", "c")) %>%
hideGroup(groups_rasters)
leaflet() %>%
addTiles() %>%
addCircles(data=bozen2, group = "shape") %>%
addRasterImage(p1, group=groups_rasters[[1]], colors=pal) %>%
addRasterImage(p2, group=groups_rasters[[2]], colors=pal) %>%
addRasterImage(p3, group=groups_rasters[[3]], colors=pal) %>%
addLayersControl(overlayGroups = c("shape", groups_rasters))
devtools::build_vignettes()
devtools::build_vignettes()
library(rainfallR)
library(here)
library(sf)
library(dplyr)
library(tmap)
library(mapview)
library(tidyverse)
library(raster)
library(leaflet)
library(rainfallR)
library(here)
library(sf)
library(dplyr)
library(tmap)
library(mapview)
library(tidyverse)
library(raster)
library(leaflet)
- first we need to set some paths
# the path to the directory of the NetCDFs which are stored for each month
path_ncdf = "\\\\projectdata.eurac.edu/projects/Proslide/PREC_GRIDS_updated/"
# then we need a path to a spatial object (shape, geopackage...)
spatial.obj = bozen # should be included in the package
head(spatial.obj)
```{r, echo=F}
data(World)
tmap_mode("view")
tm_shape(spatial.obj) +
tm_dots()
dts = c(as.Date("2016-01-12"), as.Date("2016-01-14"))
seqq = T
days_back = 4
res = get_rainfall(data_path = path_ncdf,
spatial.obj = spatial.obj,
dts = dts,
seqq = seqq,
days_back = days_back)
```{r setup, echo=T, message=FALSE, warning=FALSE}
