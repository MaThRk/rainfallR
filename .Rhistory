df[["id"]] = 1:nrow(df)
# get the geometry column and the id column to later merge back the geometry uniquely
geom = df %>% dplyr::select(id)
# make one df without geometry
df_no_geom = df %>% st_drop_geometry()
# columns to considerate
cols_dates =  grep("\\d{8}", names(df_no_geom), value=T)
cols_others = names(df_no_geom)[!names(df_no_geom) %in% cols_dates]
# put the dates and the precip in one column
df_long = df_no_geom %>% pivot_longer(-cols_others, names_to="date", values_to="precip")
# put the dates and the precip in one column
df_long = df_no_geom %>% pivot_longer(-cols_others, names_to="date", values_to="precip", names_repair="minimal")
# merge the geom back
df_long = merge(geom, df_long, by="id")
df_long = df_long %>%
group_by(id) %>%
mutate(cumsum = cumsum(precip),
date = as.Date(date, "%Y%m%d"))
# get an incresing index per group
df_long = df_long %>%
group_by(id) %>%
mutate(days_before_event = seq(days_back+1, 1))
out[[i]] = df_long
devtools::load
devtools::load_all()
# for each day get the rainfall at the slide location
out = vector("list", length=length(slides_same_day))
slides_same_day
length(slides_same_day)
slides_same_day = slides_same_day[1:10]
# now lets use the data that comes already preprocessed with the iffitoR package
# we need to filter the right slides as we did above for the data queried from the databse
landsld = landsld %>%
filter(str_detect(second_level, "translational")) %>%
filter(date_info == "day") %>%
filter(year.int >= 1980)
for (row in 1:nrow(landsld)) {
# get the day of the event
dts = landsld[row,][["date"]]
dts_chr = as.character(dts) %>% str_replace_all(., "-", "")
# add this spatial object to the list with the name being the day
if(dts_chr %in% names(slides_same_day)){
slides_same_day[[dts_chr]] = rbind(slides_same_day[[dts_chr]], landsld[row,])
} else{
slides_same_day[[dts_chr]] = landsld[row, ]
}
}
slides_same_day = slides_same_day[1:20]
# for each day get the rainfall at the slide location
out = vector("list", length=length(slides_same_day))
# measure the time
start = Sys.time()
out
# iterate over the spatial object
for (i in seq_along(slides_same_day)) {
# print some informative message
n = length(slides_same_day)
str = paste0(i, "/", n)
dashes = paste0(replicate(20, "-"), collapse = "")
cat(yellow$bold$underline("\n------------", str, dashes, "\n\n"))
# get the date of the slides
# this is one of the inputs to the function
dts = names(slides_same_day)[[i]] %>% as.Date(., "%Y%m%d")
# the spatial object
# another input
spatial.obj = slides_same_day[[i]]
# some other arguments
days_back =7
seqq = FALSE # we only consider one day per slides (not considering the days back)
rf = invisible(rainfallR::get_rainfall(
spatial.obj = spatial.obj,
dts = dts,
seqq = seqq,
days_back = days_back
))
# there can only be one list element as we extract data for one day each
out[[i]] = rf
}
# for each day get the rainfall at the slide location
out = vector("list", length=length(slides_same_day))
# measure the time
start = Sys.time()
# iterate over the spatial object
for (i in seq_along(slides_same_day)) {
# print some informative message
n = length(slides_same_day)
str = paste0(i, "/", n)
dashes = paste0(replicate(20, "-"), collapse = "")
cat(yellow$bold$underline("\n------------", str, dashes, "\n\n"))
# get the date of the slides
# this is one of the inputs to the function
dts = names(slides_same_day)[[i]] %>% as.Date(., "%Y%m%d")
# the spatial object
# another input
spatial.obj = slides_same_day[[i]]
# some other arguments
days_back =7
seqq = FALSE # we only consider one day per slides (not considering the days back)
rf = invisible(rainfallR::get_rainfall(
spatial.obj = spatial.obj,
dts = dts,
seqq = seqq,
days_back = days_back
))
# there can only be one list element as we extract data for one day each
out[[i]] = rf
}
end = Sys.time()
took=end-start
took
# will bring each dataframe in a "long" fomat
out_long_dfs = map(out, function(x) {rainfallR::make_cumulative_rainfall(res = x, days_back=days_back)})
out_long_dfs[[1]]
View(out_long_dfs[[1]])
View(out_long_dfs[[14]])
View(out_long_dfs[[1]])
View(out_long_dfs[[14]])
View(out_long_dfs)
slides_same_day[[1]]
slides_same_day[[2]]
slides_same_day[[17]]
slides_same_day[[14]]
# now lets use the data that comes already preprocessed with the iffitoR package
# we need to filter the right slides as we did above for the data queried from the databse
landsld = landsld %>%
filter(str_detect(second_level, "translational|rotational")) %>%
filter(date_info == "day") %>%
filter(year.int >= 1980)
# create the list for the events on the same day
slides_same_day = list()
for (row in 1:nrow(landsld)) {
# get the day of the event
dts = landsld[row,][["date"]]
dts_chr = as.character(dts) %>% str_replace_all(., "-", "")
# add this spatial object to the list with the name being the day
if(dts_chr %in% names(slides_same_day)){
slides_same_day[[dts_chr]] = rbind(slides_same_day[[dts_chr]], landsld[row,])
} else{
slides_same_day[[dts_chr]] = landsld[row, ]
}
}
length(slides_same_day)
map(slides_same_day nrow)
map(slides_same_day, nrow)
map_dbl(slides_same_day, nrow)
slides_same_day = slides_same_day[1:20]
map_dbl(slides_same_day, nrow)
sapply(slides_same_day, nrow)
sapply(slides_same_day, nrow, USE.NAMES = F)
sapply(slides_same_day, nrow, USE.NAMES = FALSE)
sapply(slides_same_day, nrow, USE.NAMES = T)
sapply(slides_same_day, nrow)
slides_same_day[[1]]
slides_same_day[[14]]
landsld
dim(landsld)
data("landsld")
dim(landsld)
# now lets use the data that comes already preprocessed with the iffitoR package
# we need to filter the right slides as we did above for the data queried from the databse
landsld = landsld %>%
filter(str_detect(second_level, "translational|rotational")) %>%
filter(date_info == "day") %>%
filter(year.int >= 1980)
# create the list for the events on the same day
slides_same_day = list()
for (row in 1:nrow(landsld)) {
# get the day of the event
dts = landsld[row,][["date"]]
dts_chr = as.character(dts) %>% str_replace_all(., "-", "")
# add this spatial object to the list with the name being the day
if(dts_chr %in% names(slides_same_day)){
slides_same_day[[dts_chr]] = rbind(slides_same_day[[dts_chr]], landsld[row,])
} else{
slides_same_day[[dts_chr]] = landsld[row, ]
}
}
length(slides_same_day)
# add this spatial object to the list with the name being the day
if(dts_chr %in% names(slides_same_day)){
slides_same_day[[dts_chr]] = rbind(slides_same_day[[dts_chr]], landsld[row,])
} else{
slides_same_day[[dts_chr]] = landsld[row, ]
}
}
# create a vector of the slides per day
n_slides_per_day = sapply(slides_same_day, nrow)
# what is the max slides per day
m = max(n_slides_per_day)
# when did it happen
n_slides_per_day[n_slides_per_day == m]
# for each day get the rainfall at the slide location
out = vector("list", length=length(slides_same_day))
slides_same_day = slides_same_day[1:20]
# for each day get the rainfall at the slide location
out = vector("list", length=length(slides_same_day))
# measure the time
start = Sys.time()
# for each day get the rainfall at the slide location
out = vector("list", length=length(slides_same_day))
# measure the time
start = Sys.time()
# iterate over the spatial object
for (i in seq_along(slides_same_day)) {
# print some informative message
n = length(slides_same_day)
str = paste0(i, "/", n)
dashes = paste0(replicate(20, "-"), collapse = "")
cat(yellow$bold$underline("\n------------", str, dashes, "\n\n"))
# get the date of the slides
# this is one of the inputs to the function
dts = names(slides_same_day)[[i]] %>% as.Date(., "%Y%m%d")
# the spatial object
# another input
spatial.obj = slides_same_day[[i]]
# some other arguments
days_back =7
seqq = FALSE # we only consider one day per slides (not considering the days back)
rf = invisible(rainfallR::get_rainfall(
spatial.obj = spatial.obj,
dts = dts,
seqq = seqq,
days_back = days_back
))
# there can only be one list element as we extract data for one day each
out[[i]] = rf
}
end = Sys.time()
took=end-start
took
# will bring each dataframe in a "long" fomat
out_long_dfs = map(out, function(x) {rainfallR::make_cumulative_rainfall(res = x, days_back=days_back)})
# one column with the cumulative sum (cumsum) and one with the dates and also an integer
# column with the dates before the event
head(out_long_dfs[[1]])
# so we exrtact the first (and only) element of each list
out_simple_list = map(out_long_dfs, ~.x[[1]])
dim(out_simple_list)
### create unique id for each slide
# get the first and already create the new id
out_unique_slide = out_simple_list[[1]] %>%
mutate(id = paste0(1, "_", id))
# loop over the others and use the counter variable as additional identifier
for (i in seq_along(out_simple_list)) {
# dont do it for the first one
if(!i==1){
df = out_simple_list[[i]] %>%
mutate(id = paste0(i, "_", id))
out_unique_slide = rbind(out_unique_slide, df)
}
}
dim(out_unique_slide)
View(out_unique_slide)
ggplot(out_unique_slide) +
geom_line(aes(x = days_before_event, y = cumsum, group=id, col=second_level)) +
scale_x_reverse()
# create an upcounting couter
out_unique_slide %>%
group_by(id) %>%
mutate(time_anim = row_number()) %>%
ggplot(., aes(x=days_before_event, y=cumsum, group=id, col=second_level)) +
geom_line() +
geom_point() +
scale_x_reverse() +
geom_segment(aes(xend=0, yend=cumsum), linetype=2, colour="grey") +
geom_text(aes(x = -0.3, label=iffi)) +
theme_light() +
labs(title="Cumulative Rainfall before Landslides",
subtitle = "at point location",
x = "Days before Slide",
y = "Cumulative Rainfall per day [mm]") +
transition_reveal(time_anim)
names(out_unique_slide)
# create an upcounting couter
out_unique_slide %>%
group_by(id) %>%
mutate(time_anim = row_number()) %>%
ggplot(., aes(x=days_before_event, y=cumsum, group=id, col=second_level)) +
geom_line() +
geom_point() +
scale_x_reverse() +
geom_segment(aes(xend=0, yend=cumsum), linetype=2, colour="grey") +
geom_text(aes(x = -0.3, label=PIFF_ID)) +
theme_light() +
labs(title="Cumulative Rainfall before Landslides",
subtitle = "at point location",
x = "Days before Slide",
y = "Cumulative Rainfall per day [mm]") +
transition_reveal(time_anim)
names(landsld)
out_unique_slide
names(out_unique_slide)
table(out_unique_slide$area)
table(is.na(out_unique_slide$area))
# create an upcounting couter
out_unique_slide %>%
group_by(id) %>%
mutate(time_anim = row_number()) %>%
ggplot(., aes(x=days_before_event, y=cumsum, group=id, col=second_level, size=area)) +
geom_line() +
geom_point() +
scale_x_reverse() +
geom_segment(aes(xend=0, yend=cumsum), linetype=2, colour="grey") +
geom_text(aes(x = -0.3, label=PIFF_ID)) +
theme_light() +
labs(title="Cumulative Rainfall before Landslides",
subtitle = "at point location",
x = "Days before Slide",
y = "Cumulative Rainfall per day [mm]") +
transition_reveal(time_anim)
# create an upcounting couter
out_unique_slide %>%
group_by(id) %>%
mutate(time_anim = row_number()) %>%
filter(area != NA) %>%
ggplot(., aes(x=days_before_event, y=cumsum, group=id, col=second_level, size=area)) +
geom_line() +
geom_point() +
scale_x_reverse() +
geom_segment(aes(xend=0, yend=cumsum), linetype=2, colour="grey") +
geom_text(aes(x = -0.3, label=PIFF_ID)) +
theme_light() +
labs(title="Cumulative Rainfall before Landslides",
subtitle = "at point location",
x = "Days before Slide",
y = "Cumulative Rainfall per day [mm]") +
transition_reveal(time_anim)
# create an upcounting couter
out_unique_slide %>%
group_by(id) %>%
mutate(time_anim = row_number()) %>%
ggplot(., aes(x=days_before_event, y=cumsum, group=id, col=second_level, size=area)) +
geom_line() +
geom_point() +
scale_x_reverse() +
geom_segment(aes(xend=0, yend=cumsum), linetype=2, colour="grey") +
geom_text(aes(x = -0.3, label=PIFF_ID)) +
theme_light() +
labs(title="Cumulative Rainfall before Landslides",
subtitle = "at point location",
x = "Days before Slide",
y = "Cumulative Rainfall per day [mm]") +
transition_reveal(time_anim)
# create an upcounting couter
out_unique_slide %>%
group_by(id) %>%
mutate(time_anim = row_number()) %>%
ggplot(., aes(x=days_before_event, y=cumsum, group=id, col=second_level)) +
geom_line() +
geom_point() +
scale_x_reverse() +
geom_segment(aes(xend=0, yend=cumsum), linetype=2, colour="grey") +
geom_text(aes(x = -0.3, label=PIFF_ID)) +
theme_light() +
labs(title="Cumulative Rainfall before Landslides",
subtitle = "at point location",
x = "Days before Slide",
y = "Cumulative Rainfall per day [mm]") +
transition_reveal(time_anim)
# create an upcounting couter
out_unique_slide %>%
group_by(id) %>%
mutate(time_anim = row_number()) %>%
ggplot(., aes(x=days_before_event, y=cumsum, group=id, col=second_level), lwd=2) +
geom_line() +
geom_point() +
scale_x_reverse() +
geom_segment(aes(xend=0, yend=cumsum), linetype=2, colour="grey") +
geom_text(aes(x = -0.3, label=PIFF_ID)) +
theme_light() +
labs(title="Cumulative Rainfall before Landslides",
subtitle = "at point location",
x = "Days before Slide",
y = "Cumulative Rainfall per day [mm]") +
transition_reveal(time_anim)
View(out_unique_slide)
# create an upcounting couter
out_unique_slide %>%
group_by(id) %>%
filter(area!=NA) %>% View()
# create an upcounting couter
out_unique_slide %>%
group_by(id) %>%
filter(area != NA) %>% View()
# create an upcounting couter
out_unique_slide %>%
group_by(id) %>%
filter(is.na(area)) %>% View()
# create an upcounting couter
out_unique_slide %>%
group_by(id) %>%
filter(!is.na(area)) %>% View()
# create an upcounting couter
out_unique_slide %>%
group_by(id) %>%
filter(!is.na(area)) %>%
mutate(time_anim = row_number()) %>%
ggplot(., aes(x=days_before_event, y=cumsum, group=id, col=second_level), lwd=2) +
geom_line() +
geom_point() +
scale_x_reverse() +
geom_segment(aes(xend=0, yend=cumsum), linetype=2, colour="grey") +
geom_text(aes(x = -0.3, label=PIFF_ID)) +
theme_light() +
labs(title="Cumulative Rainfall before Landslides",
subtitle = "at point location",
x = "Days before Slide",
y = "Cumulative Rainfall per day [mm]") +
transition_reveal(time_anim)
# create an upcounting couter
out_unique_slide %>%
group_by(id) %>%
filter(!is.na(area)) %>%
mutate(time_anim = row_number()) %>%
ggplot(., aes(x=days_before_event, y=cumsum, group=id, col=second_level), lwd=2) +
geom_line() +
geom_point(size=area) +
scale_x_reverse() +
geom_segment(aes(xend=0, yend=cumsum), linetype=2, colour="grey") +
geom_text(aes(x = -0.3, label=PIFF_ID)) +
theme_light() +
labs(title="Cumulative Rainfall before Landslides",
subtitle = "at point location",
x = "Days before Slide",
y = "Cumulative Rainfall per day [mm]") +
transition_reveal(time_anim)
# create an upcounting couter
out_unique_slide %>%
group_by(id) %>%
filter(!is.na(area)) %>%
mutate(time_anim = row_number()) %>%
ggplot(., aes(x=days_before_event, y=cumsum, group=id, col=second_level), lwd=2) +
geom_line() +
geom_point(aes(size=area)) +
scale_x_reverse() +
geom_segment(aes(xend=0, yend=cumsum), linetype=2, colour="grey") +
geom_text(aes(x = -0.3, label=PIFF_ID)) +
theme_light() +
labs(title="Cumulative Rainfall before Landslides",
subtitle = "at point location",
x = "Days before Slide",
y = "Cumulative Rainfall per day [mm]") +
transition_reveal(time_anim)
out_unique_slide %>%
out_unique_slide %>%
ggplot() +
geom_histogram(aes(area))
out_unique_slide
out_unique_slide %>%
ggplot() +
geom_histogram(aes(area))
out_unique_slide %>%
ggplot() +
geom_histogram(aes(log10(area)))
out_unique_slide %>%
ggplot() +
geom_histogram(aes(area)) %>%
scale_x_log10()
out_unique_slide %>%
mutate(area = as.integer(area)) %>%
ggplot() +
geom_histogram(aes(area)) %>%
scale_x_log10()
out_unique_slide %>%
mutate(area = as.integer(area)) %>%
ggplot() +
geom_histogram(aes(x = area)) %>%
scale_x_log10()
out_unique_slide %>%
mutate(area = log10(area)) %>%
ggplot() +
geom_histogram(aes(x = area))
# create an upcounting couter
out_unique_slide %>%
group_by(id) %>%
filter(!is.na(area)) %>%
mutate(time_anim = row_number()) %>%
mutate(area = log10(area)) %>%
ggplot(., aes(x=days_before_event, y=cumsum, group=id, col=second_level), lwd=2) +
geom_line() +
geom_point(aes(size=area)) +
scale_x_reverse() +
geom_segment(aes(xend=0, yend=cumsum), linetype=2, colour="grey") +
geom_text(aes(x = -0.3, label=PIFF_ID)) +
theme_light() +
labs(title="Cumulative Rainfall before Landslides",
subtitle = "at point location",
x = "Days before Slide",
y = "Cumulative Rainfall per day [mm]") +
transition_reveal(time_anim)
out_unique_slide %>%
group_by(id) %>%
filter(!is.na(area)) %>%
mutate(time_anim = row_number()) %>%
mutate(area = log10(area)) %>%
ggplot(., aes(x=days_before_event, y=cumsum, group=id, col=second_level), lwd=2) +
geom_line() +
geom_point(aes(size=area)) +
scale_x_reverse() +
geom_segment(aes(xend=0, yend=cumsum), linetype=2, colour="grey") +
geom_text(aes(x = -0.3, label=PIFF_ID)) +
theme_light() +
labs(title="Cumulative Rainfall before Landslides",
subtitle = "at point location",
x = "Days before Slide",
y = "Cumulative Rainfall per day [mm]",
size = "log 10 area ")
devtools::build_vignettes()
devtools::build_vignettes()
library(gganimate)
devtools::build_vignettes()
devtools::build_vignettes()
