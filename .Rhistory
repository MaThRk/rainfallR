warning(sprintf("The CRS of the spatial object and the NetCDF are not equal Reprojecting the shape to: %s", crs_nc))
spatial.obj = st_transform(spatial.obj, crs_nc)
}
crs_shape = suppressWarnings(crs(spatial.obj) %>% crs() %>% attributes() %>% .[["projargs"]])
# if not equal, reproject the shape...
if(!crs_nc == crs_shape){
warning(sprintf("The CRS of the spatial object and the NetCDF are not equal Reprojecting the shape to: %s", crs_nc))
spatial.obj = st_transform(spatial.obj, crs_nc)
}
day = dts[[1]]
day
# get the year the month and the day
y = format(day, "%Y")
m = format(day, "%m")
d = format(day, "%d")
# create the path to the data for one month
paths_to_data = get_nc_paths(data_path, day, days_back)
paths_to_data
# open the file
ncin = ncdf4::nc_open(paths_to_data[[1]])
ncin
# get a character string of the dates
dates_nc = get_dates_ncdf(ncin, return_date_object=T)
dates_nc
# read the precipitation values
precip_nc = ncvar_get(ncin, nc_var)
dim(precip_nc)
# read the projection info --> should be done outside the loop as it is always the same
proj = nc.get.proj4.string(ncin, nc_var)
# create the output
out_rasters = vector("list", length = as.integer(days_back))
precip_nc
a = precip_ny[,,c(1,4)]
a = precip_nc[,,c(1,4)]
dim(a)
identical(a[[1]], precip_nc[[1]])
identical(a[[2]], precip_nc[[4]])
day
days_back
day
d
days_back
d-days_back
d
class(d)
# get the necessary raters
d = as.integer(d)
d-days_back
seq(d, d-days_back)
days_to_extract = seq(d, d-days_back)
days_to_extract
# get the arrays
arrays = precip_nc[,,days_to_extract]
dim(arrays)
days_to_extract
day
d = days_to_extract[[1]]
d
days_to_extract
dates_nc
class(dates_nc)
dates_nc
days_to_extract
class(days_to_extract)
days_to_extract = as.character(days_to_extract)
days_to_extract
dates_nc
st = raster(paths_to_data[[1]])
class(st)
st
st[[28]]
st[28]
st = brick(paths_to_data[[1]])
st
st[[17]]
st[c(1,2,6)]
a = st[c(1,2,6)]
a
a
st
st[[27]]
st[[c(1,3,7)]]
a = st[[c(1,3,7)]]
a
a[[3]] == st[[7]]
plot(a[[3]] )
plot(st[[7]])
writeRaster(a[[3]], "../../../Desktop/test.tif")
d = as.integer(d)
days_to_extract = seq(d, d-days_back)
days_back
days_to_extract = seq(d, d-days_back)
days_to_extract
days_names = dates_nc[as.integer(format(dates_nc, "%d") %in%
as.integer(days_to_extract))]
days_names
days_to_extract
class(days_to_extract)
as.integer(format(dates_nc, "%d")
as.integer(format(dates_nc, "%d"))
days_names = dates_nc[as.integer(format(dates_nc, "%d")) %in%
as.integer(days_to_extract)]
days_names
# get the indices into the rasterbrick
d = as.integer(d)
d
days_to_extract = seq(d, d-days_back)
days_to_extract
days_to_extract = arrange(seq(d, d-days_back))
days_to_extract = sort(seq(d, d-days_back)))
days_to_extract = sort(seq(d, d-days_back))
days_to_extract
days_names = dates_nc[as.integer(format(dates_nc, "%d")) %in%
as.integer(days_to_extract)]
days_names
raster_list = vector("list", length=length(days_to_extract))
raster_list
names(raster_list) = days_names
raster_list
names(raster_list) = days_names %>% as.character()
raster_list
names(raster_list) = days_names %>% as.character() %>% gsub("-", ".")
names(raster_list) = days_names %>% as.character()
names(raster_list)
a = names(raster_list)
class(a)
days_to_extract
days_to_extract
seq_along(days_to_extract)
i = 1
ras = raster_brick[[days_to_extract[[i]]]]
raster_brick = brick(paths_to_data[[1]])
ras = raster_brick[[days_to_extract[[i]]]]
ras
# get the rasters and put them into a list
for (i in seq(days_to_extract)) {
ras = raster_brick[[days_to_extract[[i]]]]
raster_list[[i]] = ras
}
raster_list
devtools::load_all()
raster_list = get_raster_list(d, days_back, dates_nc, paths_to_data)
raster_list
paths_to_data
data_path
day
days_back
days_back = 15
# create the path to the data for one month
paths_to_data = get_nc_paths(data_path, day, days_back)
paths_to_data
dates_nc = get_dates_ncdf(ncin, return_date_object = T)
dates_nc
ncin
m = paths_to_data
m
m = m[[2]]
# for each month open a connection to a new netcdf file
m_ncdf = ncdf4::nc_open(m)
m_ncdf
m_dates = get_dates_ncdf(m_ncin, return_date_object = T)
# for each month open a connection to a new netcdf file
m_ncin = ncdf4::nc_open(m)
m_dates = get_dates_ncdf(m_ncin, return_date_object = T)
m_dates
file.edit("R/get_raster_list.R")
file.edit("R/get_raster_list_one_month.R")
day
days_back
paths_to_data
file.edit("R/utils.R")
day
days_back
data_path
# day we want to extract
y = format(day, "%Y")
m = format(day, "%m")
d = format(day, "%d")
path_day = paste0(data_path, y, "/", "DAILYPCP_", y, formatC(m, flag = 0, width = 2), ".nc")
path_day
# last day to extract
days_back = max(days_back)
days_back
max_day_back = min(day - days_back)
mmax_day_b
max_day_back
y_b = format(max_day_back, "%Y")
m_b = format(max_day_back, "%m")
d_b = format(max_day_back, "%d")
m_b
y_b
paths = list(paste0(y,m) = path_day, paste0(y_b, m_b) = last_month_path)
paste0(y,m)
paste0(y_b, m_b)
paths = list(paste0(y,m) = path_day, paste0(y_b, m_b) = last_month_path)
paths = list()
paths[[paste0(y,m]] = path_day
paths = list(paste0(y,m) = path_day, paste0(y_b, m_b) = last_month_path)
return(c(path_day, last_month_path))
}else{
return(path_day)
}
}
this_month = paste0(y,m)
class(this_month)
paths[[this_month]] = path_day
paths
get_nc_paths = function(data_path, day, days_back){
# day we want to extract
y = format(day, "%Y")
m = format(day, "%m")
d = format(day, "%d")
path_day = paste0(data_path, y, "/", "DAILYPCP_", y, formatC(m, flag = 0, width = 2), ".nc")
# last day to extract
days_back = max(days_back)
max_day_back = min(day - days_back)
y_b = format(max_day_back, "%Y")
m_b = format(max_day_back, "%m")
d_b = format(max_day_back, "%d")
last_month_path = paste0(data_path, y_b, "/", "DAILYPCP_", y_b, formatC(m_b, flag = 0, width = 2), ".nc")
# if the current day has a different month than the last day back we need two paths
if(!m == m_b){
warning("Your first day of extraction is in another month. Pray and hope this function works")
paths = list()
this_month = paste0(y,m)
last_month  = paste0(y_b, m_b)
paths[[this_month]] = path_day
paths[[last_month]] = last_month_path
return(paths)
}else{
paths = list()
this_month = paste0(y,m)
paths[[this_month]] = path_day
return(paths)
}
}
a = get_nc_paths(data_path, day, days_back)
a
devtools::load_all()
# create the path to the data for one month
paths_to_data = get_nc_paths(data_path, day, days_back)
paths_to_data
i = 1
year = names(paths_to_data)[[i]]
year
year = names(paths_to_data)[[i]][1:4]
year
year = names(paths_to_data)[[i]] %>% substr(., 1, 4)
library(magrittr)
year = names(paths_to_data)[[i]] %>% substr(., 1, 4)
year
month = names(paths_to_data)[[i]] %>% substr(., 5, 6)
month
# for each month open a connection to a new netcdf file
m_ncin = ncdf4::nc_open(paths_to_data[[i]])
day
days_ba
days_back
paths_to_data
day - days_back
# create a sequence
dates_to_extract = seq(min_day, day, by="day")
# get the max day back
min_day = (day - days_back)
# create a sequence
dates_to_extract = seq(min_day, day, by="day")
dates_to_extract
d = dates_to_extract[[1]]
d
y = format(d, "y")
y
y = format(d, "y")
y
y = format(d, "%y")
y
y = format(d, "%Y")
y
year = names(paths_to_data) %>% substr(., 1, 4)
year
paths_to_data
# year o
m = format(d, "%m")
m
grep(m, names(paths_to_data))
paths_to_data
grep(m, names(paths_to_data), value = T)
right_path = paths_to_data[grep(m, names(paths_to_data))]
right_path
# dates for this month
dates = get_dates_ncdf(right_path)
# open the connection
ncin = ncdf4::nc_open(right_path)
right_path
# open the connection
ncin = ncdf4::nc_open(right_path[[1]])
ncin
# dates for this month
dates = get_dates_ncdf(right_path)
# dates for this month
dates = rainfallR::get_dates_ncdf(right_path)
devtools::load_all()
get_dates_ncdf()
# dates for this month
dates = get_dates_ncdf(right_path)
# dates for this month
dates = get_dates_ncdf(ncin)
dates
d
d = format(d, "%d")
d
# create a sequence
dates_to_extract = seq(min_day, day, by="day")
dates_to_extract
file.edit("R/get_raster_list_one_month.R")
# read the brick
raster_brick = raster::brick(right_path)
raster_brick
d
dates_to_extract
# one raster list for all dates in the end
raster_list = vector("list", length=length(dates_to_extract))
# one raster list for all dates in the end
raster_list = vector("list", length=length(dates_to_extract))
names(raster_list) = dates_to_extract
raster_list
# month of the date to extract
m = format(dates_to_extract[[d]], "%m")
d = 1
# month of the date to extract
m = format(dates_to_extract[[d]], "%m")
m
right_path = paths_to_data[grep(m, names(paths_to_data))]
# open the connection
ncin = ncdf4::nc_open(right_path[[1]])
# dates for this month
dates = get_dates_ncdf(ncin)
# get the index to extract
d = format(dates_to_extract[[d]], "%d")
d
d
# get the index to extract
d = format(dates_to_extract[[d]], "%d") %>% as.integer()
# get the index to extract
d = format(dates_to_extract[[d]], "%d") %>% as.integer(.)
# get the index to extract
d = format(dates_to_extract[[d]], "%d")
d = format(dates_to_extract[[d]], "%d")
d
d = 1
# get the index to extract
idx = format(dates_to_extract[[d]], "%d") %>% as.integer()
idx
devtools::load_all()
paths_to_data
get_raster_list_n_month(paths_to_data, day, days_back)
raster_list = get_raster_list_n_month(paths_to_data, day, days_back)
devtools::load_all()
raster_list = get_raster_list_n_month(paths_to_data, day, days_back)
dates_to_extract
# month of the date to extract
m = format(dates_to_extract[[d]], "%m")
y = format(dates_to_extract[[d]], "%y")
d = format(dates_to_extract[[d]], "%d")
m
y
d
# check based on the month
right_path = paths_to_data[grep(m, names(paths_to_data))]
# open the connection
ncin = ncdf4::nc_open(right_path[[1]])
# dates for this month
dates = get_dates_ncdf(ncin)
# get the index to extract
idx = format(dates_to_extract[[d]], "%d") %>% as.integer()
devtools::load_all()
raster_list = get_raster_list_n_month(paths_to_data, day, days_back)
library(dofuture)
install.packages("doFuture")
library(parallel)
parallel::detectCores()
library(foreach)
dates_to_extract
foreach(i = seq_along(dates_to_extract)) {
# month of the date to extract
m = format(dates_to_extract[[i]], "%m")
y = format(dates_to_extract[[i]], "%y")
d = format(dates_to_extract[[i]], "%d")
# check based on the month
right_path = paths_to_data[grep(m, names(paths_to_data))]
# open the connection
ncin = ncdf4::nc_open(right_path[[1]])
# dates for this month
dates = get_dates_ncdf(ncin)
# get the index to extract
idx = format(dates_to_extract[[i]], "%d") %>% as.integer()
# read the brick --> this should not be done each time in the loop!!
raster_brick = raster::brick(right_path)
message(paste0("reading the data for date: "), c(y,m,d))
# extract the date
ras = raster_brick[[idx]]
# put into the list
raster_list[[i]] = ras
}
dates_to_extract
# month of the date to extract
m = format(dates_to_extract[[i]], "%m")
y = format(dates_to_extract[[i]], "%y")
d = format(dates_to_extract[[i]], "%d")
# check based on the month
right_path = paths_to_data[grep(m, names(paths_to_data))]
# open the connection
ncin = ncdf4::nc_open(right_path[[1]])
# dates for this month
dates = get_dates_ncdf(ncin)
# get the index to extract
idx = format(dates_to_extract[[i]], "%d") %>% as.integer()
# read the brick --> this should not be done each time in the loop!!
raster_brick = raster::brick(right_path)
message(paste0("reading the data for date: "), c(y,m,d))
i = 1
# month of the date to extract
m = format(dates_to_extract[[i]], "%m")
y = format(dates_to_extract[[i]], "%y")
d = format(dates_to_extract[[i]], "%d")
# check based on the month
right_path = paths_to_data[grep(m, names(paths_to_data))]
# open the connection
ncin = ncdf4::nc_open(right_path[[1]])
# dates for this month
dates = get_dates_ncdf(ncin)
# get the index to extract
idx = format(dates_to_extract[[i]], "%d") %>% as.integer()
changed = T
if(changed){
print("read the brick")
# read the brick --> this should not be done each time in the loop!!
raster_brick = raster::brick(right_path)
if((m == format(dates_to_extract[[i+1]], "%m"))){
changed = FALSE
}else{
changed = TRUE
}
} else{
print("no change --> dont read the brick")
}
i = 2
# month of the date to extract
m = format(dates_to_extract[[i]], "%m")
y = format(dates_to_extract[[i]], "%y")
d = format(dates_to_extract[[i]], "%d")
# check based on the month
right_path = paths_to_data[grep(m, names(paths_to_data))]
# open the connection
ncin = ncdf4::nc_open(right_path[[1]])
# dates for this month
dates = get_dates_ncdf(ncin)
# get the index to extract
idx = format(dates_to_extract[[i]], "%d") %>% as.integer()
changed = T
format(dates_to_extract[[i+1]], "%m")
# for each date
changed = T
i
i = 1
# month of the date to extract
m = format(dates_to_extract[[i]], "%m")
y = format(dates_to_extract[[i]], "%y")
d = format(dates_to_extract[[i]], "%d")
# check based on the month
right_path = paths_to_data[grep(m, names(paths_to_data))]
# open the connection
ncin = ncdf4::nc_open(right_path[[1]])
# dates for this month
dates = get_dates_ncdf(ncin)
# get the index to extract
idx = format(dates_to_extract[[i]], "%d") %>% as.integer()
if(changed) {
print("read the brick")
# read the brick --> this should not be done each time in the loop!!
raster_brick = raster::brick(right_path)
if ((m == format(dates_to_extract[[i + 1]], "%m"))) {
changed = FALSE
} else{
changed = TRUE
}
} else{
print("no change --> dont read the brick")
}
i = 2
# month of the date to extract
m = format(dates_to_extract[[i]], "%m")
y = format(dates_to_extract[[i]], "%y")
d = format(dates_to_extract[[i]], "%d")
# check based on the month
right_path = paths_to_data[grep(m, names(paths_to_data))]
# open the connection
ncin = ncdf4::nc_open(right_path[[1]])
# dates for this month
dates = get_dates_ncdf(ncin)
# get the index to extract
idx = format(dates_to_extract[[i]], "%d") %>% as.integer()
changed
i = 1
m
m == format(dates_to_extract[[i + 1]], "%m")
if ((m == format(dates_to_extract[[i + 1]], "%m"))) {
changed = FALSE
} else{
changed = TRUE
}
changed
changed = TRUE
