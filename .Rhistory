library(sf)
library(raster)
library(forcats)
library(glue)
library(stringr)
library(ggrepel)
# we want the point data
points = T
# which os to automatically set the paths
os = Sys.info()["sysname"]
if(os == "Linux"){
path_ncdf = "/mnt/CEPH_PROJECTS/Proslide/PREC_GRIDS_updated/"
poly_landslide_path = "/mnt/CEPH_PROJECTS/Proslide/Landslides/Iffi_db_xxxx_to_2018/exportperEurac2020/Shapefiles/IFFI10_5.shp"
points_landslide_path = "/mnt/CEPH_PROJECTS/Proslide/Landslides/Iffi_db_xxxx_to_2018/exportperEurac2020/Shapefiles/IFFI10_1.shp"
database_dir = "/mnt/CEPH_PROJECTS/Proslide/Landslides/Iffi_db_xxxx_to_2018/exportperEurac2020/database"
}else if(os == "Windows"){
path_ncdf = "\\\\projectdata.eurac.edu/projects/Proslide/PREC_GRIDS_updated/"
poly_landslide_path = "\\\\projectdata.eurac.edu/projects/Proslide/Landslides/Iffi_db_xxxx_to_2018/exportperEurac2020/Shapefiles/IFFI10_5.shp"
points_landslide_path = "\\\\projectdata.eurac.edu/projects/Proslide/Landslides/Iffi_db_xxxx_to_2018/exportperEurac2020/Shapefiles/IFFI10_1.shp"
database_dir = "\\\\projectdata.eurac.edu/projects/Proslide/Landslides/Iffi_db_xxxx_to_2018/exportperEurac2020/database"
}else{
stop(call. = F, "what the hell are you working on...")
}
# which shape to read
if(points){
path_spatial = points_landslide_path
}else{
path_spatial = poly_landslide_path
}
res = iffitoR::make_shapefile(database_dir = database_dir,
attribute_database_name = "tbl_frane",
# the name without extension
dictionary_database_name = "diz_frane",
shapefile = path_spatial,
# normally null only setting it here for me
# the colums we want to retrieve directly
attri = c("anno_min",
"mese_min",
"giorno_min",
"area"),
# tables to join the description
joins = list(
"tbl_frane.Generalita.Cod_tipo" = c(
"diz_frane.diz_tipo_movi.cod_tipo",
"diz_frane.diz_tipo_movi.tipologia"
),
"tbl_frane.clas_ii_liv.movimento" = c(
"diz_frane.diz_movimenti.movimento",
"diz_frane.diz_movimenti.nome_movimento"
),
"tbl_frane.ass_gen_cause.causa" = c(
"diz_frane.diz_cause.causa",
"diz_frane.diz_cause.nome_causa"
)
)
)
# filter for the ones that have a date ------------------------------------
res_time = iffitoR::get_date_information(res)
# translate to english ----------------------------------------------------
res_engl = iffitoR::translate_iffi(res_time)
# filter the ones that have day information ------------------------------
res_all_day = res_engl %>% filter(date_info == "day")
# filter only the translational slides ------------------------------------
res_translational = res_all_day %>% filter(str_detect(second_level, "translational"))
#!! Cut away everything before 1980 for the rainfall data to match
res_translational = res_translational %>% filter(year.int >= 1980)
# get all observations for the unique days day
slides_same_day = list()
for (row in 1:nrow(res_translational)) {
# get the day of the event
dts = res_translational[row,][["date"]]
dts_chr = as.character(dts) %>% str_replace_all(., "-", "")
# add this spatial object to the list with the name being the day
if(dts_chr %in% names(slides_same_day)){
slides_same_day[[dts_chr]] = rbind(slides_same_day[[dts_chr]], res_translational[row,])
} else{
slides_same_day[[dts_chr]] = res_translational[row, ]
}
}
# what is the max of slides per day?
(max_slides_per_day = sapply(slides_same_day, nrow) %>% max()) # 9 translational slides per day is the max
# for each day get the rainfall at the slide location
# slides_same_day = slides_same_day[1:5]
out = vector("list", length=length(slides_same_day))
for (i in seq_along(slides_same_day)) {
print(paste("I: ", i))
# get the date of the slides
dts = names(slides_same_day)[[i]] %>% as.Date(., "%Y%m%d")
# the spatial object
spatial.obj = slides_same_day[[i]]
# some other arguments
days_back = 4
seqq = FALSE
rf = rainfallR::get_rainfall(spatial.obj = spatial.obj,
dts = dts,
seqq = seqq,
days_back = days_back)
rf_acc = rainfallR::make_cumulative_rainfall(rf)
# there can only be one list element as we extract data for one day each
out[[i]] = rf_acc[[1]]
}
i =10
# get the date of the slides
dts = names(slides_same_day)[[i]] %>% as.Date(., "%Y%m%d")
dts
# the spatial object
spatial.obj = slides_same_day[[i]]
# some other arguments
days_back = 4
seqq = FALSE
devtools::load_all()
get_raster_list_n_month
make_cumulative_rainfall
rf = rainfallR::get_rainfall(spatial.obj = spatial.obj,
dts = dts,
seqq = seqq,
days_back = days_back)
rf_acc = rainfallR::make_cumulative_rainfall(rf)
rf
res = rf
# the output list
out = vector("list", length=length(res))
names(out) = names(res)
nrow(res[[1]]) == 1
out = vector("list", length = length(res))
i =1
# iffi in names
iffi = ifelse("iffi" %in% names(df), TRUE, FALSE)
iffi
res[[1]]
# iffi in names
iffi = ifelse("iffi" %in% names(df), TRUE, FALSE)
iffi
"iffi" %in% names(df)
# make one dataframe
df = res[[i]]
df
"iffi" %in% names(df)
iffi = ifelse("iffi" %in% names(df), TRUE, FALSE)
iffi
# if there is no iffi-identifier we need another unique identifier per row
# add a unique id
if(!iffi) df[["id"]] = 1:nrow(day)
df
# get the geometry column
if(iffi){
geom = df %>% dplyr::select(iffi)
}else{
geom = df %>% dplyr::select(id)
}
geom
# a df without geom
day = df %>% st_drop_geometry()
# put the dates and the precip in one column
if(iffi){
df_long = day %>% pivot_longer(!iffi, names_to="date", values_to="precip")
}else{
df_long = day %>% pivot_longer(!id, names_to="date", values_to="precip")
}
# merge the iffi and the geom back
if(iffi){
df_long = merge(geom, df_long, by="iffi")
} else{
df_long = merge(geom, df_long, by="id")
}
df_long
df_long = df_long %>%
group_by(iffi) %>%
mutate(cumsum = cumsum(precip),
date = as.Date(date, "%Y%m%d"))
df_long
df_long$days_before_event = with(df_long, ave(seq_along(iffi), iffi, FUN = seq_along))
df_long
devtools::load_all()
rf_acc = rainfallR::make_cumulative_rainfall(rf)
rf_acc
# for each day get the rainfall at the slide location
# slides_same_day = slides_same_day[1:5]
out = vector("list", length=length(slides_same_day))
get_raster_list_n_month
for (i in seq_along(slides_same_day)) {
print(paste("I: ", i))
# get the date of the slides
dts = names(slides_same_day)[[i]] %>% as.Date(., "%Y%m%d")
# the spatial object
spatial.obj = slides_same_day[[i]]
# some other arguments
days_back = 4
seqq = FALSE
rf = rainfallR::get_rainfall(spatial.obj = spatial.obj,
dts = dts,
seqq = seqq,
days_back = days_back)
rf_acc = rainfallR::make_cumulative_rainfall(rf)
# there can only be one list element as we extract data for one day each
out[[i]] = rf_acc[[1]]
}
out
out
out[[22]]
out[[55]]
ggplot(out_long) +
geom_line(aes(x=days_before_event, y=cumsum, group=iffi)) +
scale_x_reverse() +
a = TRUE
while (a) {
i=1
if(out[[i]] == NULL){
a = FALSE
}
i = i + 1
}
ggplot(out_long) +
geom_line(aes(x=days_before_event, y=cumsum, group=iffi)) +
scale_x_reverse() +
a = TRUE
a
a = TRUE
a
while (a) {
i=1
if(is.null(out[[i]])){
a = FALSE
}
i = i + 1
}
while (a) {
i=1
print(i)
if(is.null(out[[i]])){
a = FALSE
}
i = i + 1
}
ggplot(out_long) +
geom_line(aes(x=days_before_event, y=cumsum, group=iffi)) +
scale_x_reverse() +
a = TRUE
i=1
while (a) {
print(i)
if(is.null(out[[i]])){
a = FALSE
}
i = i + 1
}
out[[34]]
out[[33]]
out[[32]]
out= out[1:32]
# write all the rows beneath each other
out_long = bind_rows(out)
out_long
ggplot(out_long) +
geom_line(aes(x=days_before_event, y=cumsum, group=iffi)) +
scale_x_reverse()
?ggrepel
ggplot(out_long) +
geom_line(aes(x=days_before_event, y=cumsum, label=iffi,group=iffi)) +
scale_x_reverse()
ggplot(out_long) +
geom_line(aes(x=days_before_event, y=cumsum,group=iffi)) +
scale_x_reverse() +
geom_text_repel()
ggplot(out_long) +
geom_line(aes(x=days_before_event, y=cumsum,group=iffi)) +
scale_x_reverse() +
geom_label_repel(aes(label=iffi))
ggplot(out_long) +
geom_line(aes(x=days_before_event, y=cumsum,group=iffi)) +
scale_x_reverse() +
geom_label_repel(aes(label=iffi, x=days_before_event, y=cumsum))
subset(out_long, group="iffi")
a = subset(out_long, group="iffi")
dim(a)
dim(out_long)
# write all the rows beneath each other
out_long = bind_rows(out)
ggplot(out_long) +
geom_line(aes(x=days_before_event, y=cumsum,group=iffi)) +
scale_x_reverse()
ggplot(out_long) +
geom_line(aes(x=days_before_event, y=cumsum,group=iffi)) +
scale_x_reverse() +
geom_label_repel(aes(label=iffi, group=iffi))
ggplot(out_long) +
geom_line(aes(x=days_before_event, y=cumsum,group=iffi)) +
scale_x_reverse() +
geom_label_repel(aes(label=iffi, x=days_before_event, y=cumsum, group=iffi))
lbls = unique(out_long$iffi)
dim(lbls)
length(lbls)
ggplot(out_long) +
geom_line(aes(x=days_before_event, y=cumsum,group=iffi)) +
scale_x_reverse() +
geom_label_repel(aes(label=lbls, x=days_before_event))
lbls = out_long %>%
group_by(iffi) %>%
summarise(iffi = dplyr::first(iffi))
lbls
ggplot(out_long) +
geom_line(aes(x=days_before_event, y=cumsum,group=iffi)) +
scale_x_reverse() +
geom_text_repel(aes(label=lbls))
ggplot(out_long) +
geom_line(aes(x=days_before_event, y=cumsum,group=iffi)) +
scale_x_reverse() +
geom_text_repel(data=lbls, aes(label=iffi))
ggplot(out_long, (aes(x=days_before_event, y=cumsum,group=iffi))) +
geom_line() +
scale_x_reverse() +
geom_text_repel(data=lbls, aes(label=iffi))
names(out_long)
ggplot(out_long, (aes(x=days_before_event, y=cumsum,group=iffi))) +
geom_line()
ggplot(out_long, (aes(x=days_before_event, y=cumsum,group=iffi))) +
geom_line() +
scale_x_reverse()
ggplot(out_long, (aes(x=days_before_event, y=cumsum,group=iffi))) +
geom_line() +
scale_x_reverse() +
geom_text_repel(data=lbls, aes(label=iffi))
lbls = out_long %>%
group_by(iffi) %>%
summarise(iffi = dplyr::first(iffi))
head(lbls)
lbls = out_long %>%
group_by(iffi, days_before_event) %>%
summarise(iffi = dplyr::first(iffi))
head(lbls)
lbls
lbls = out_long %>%
group_by(iffi) %>%
summarise(iffi = dplyr::first(iffi)) %>%
ungroup() +
mutate(days_before_event = 1)
lbls = out_long %>%
group_by(iffi) %>%
summarise(iffi = dplyr::first(iffi)) %>%
ungroup()
lbls
lbls = out_long %>%
group_by(iffi) %>%
summarise(iffi = dplyr::first(iffi)) %>%
ungroup() +
mutate(days_before_event = 1)
# write all the rows beneath each other
out_long = bind_rows(out)
lbls = out_long %>%
group_by(iffi) %>%
summarise(iffi = dplyr::first(iffi)) %>%
ungroup() +
mutate(days_before_event = 1)
lbls = out_long %>%
group_by(iffi) %>%
summarise(iffi = dplyr::first(iffi)) %>%
ungroup()
lbls
lbls = out_long %>%
group_by(iffi) %>%
summarise(iffi = dplyr::first(iffi)) %>%
ungroup() +
mutate(days_before_event = 1:nrow(.data))
lbls = out_long %>%
group_by(iffi) %>%
summarise(iffi = dplyr::first(iffi)) %>%
ungroup() +
mutate(days_before_event = "a")
lbls
lbls = out_long %>%
group_by(iffi) %>%
summarise(iffi = dplyr::first(iffi)) %>%
ungroup()
lbls$a = 1
lbls
lbls = out_long %>%
group_by(iffi) %>%
summarise(iffi = dplyr::first(iffi)) %>%
ungroup() %>%
mutate(days_before_event=1)
lbls
ggplot(out_long, (aes(x=days_before_event, y=cumsum,group=iffi))) +
geom_line() +
scale_x_reverse() +
geom_text_repel(data=lbls, aes(label=iffi))
lbls = out_long %>%
group_by(iffi) %>%
summarise(iffi = dplyr::first(iffi))
lbls
lbls = out_long %>%
group_by(iffi) %>%
mutate(iffi = dplyr::first(iffi))
lbls
lbls = out_long %>%
group_by(iffi) %>%
summarise(iffi = dplyr::first(iffi),
days_before_event = days_before_event)
lbls
lbls = out_long %>%
group_by(iffi) %>%
summarise(iffi = dplyr::first(iffi),
days_before_event = days_before_event)
lbls = out_long %>%
group_by(iffi) %>%
summarise(iffi = dplyr::first(iffi),
days_before_event = dplyr::first(days_before_event))
lbls
lbls = out_long %>%
group_by(iffi) %>%
summarise(iffi = dplyr::first(iffi),
days_before_event = dplyr::first(days_before_event),
cumsum=dplyr::first(cumsum))
lbls
ggplot(out_long, (aes(x=days_before_event, y=cumsum,group=iffi))) +
geom_line() +
scale_x_reverse() +
geom_text_repel(data=lbls, aes(label=iffi))
lbls = out_long %>%
group_by(iffi) %>%
summarise(iffi = dplyr::last(iffi),
days_before_event = dplyr::last(days_before_event),
cumsum=dplyr::last(cumsum))
ggplot(out_long, (aes(x=days_before_event, y=cumsum,group=iffi))) +
geom_line() +
scale_x_reverse() +
geom_text_repel(data=lbls, aes(label=iffi))
ggplot(out_long, (aes(x=days_before_event, y=cumsum,group=iffi))) +
geom_line() +
geom_text_repel(data=lbls, aes(label=iffi))
lbls = out_long %>%
group_by(iffi) %>%
summarise(iffi = dplyr::last(iffi),
days_before_event = dplyr::last(days_before_event),
cumsum=dplyr::last(cumsum))
lbls
count(lbls, days_before_event)
out_long %>% count(iffi, days_before_event)
out_long %>% count(iffi, days_before_event) %>% filter(n > 1)
test = out_long[1:10, ]
test
lbls = out_long %>%
group_by(iffi) %>%
summarise(iffi = dplyr::last(iffi),
days_before_event = dplyr::last(days_before_event),
cumsum=dplyr::last(cumsum))
lbls
lbls = test %>%
group_by(iffi) %>%
summarise(iffi = dplyr::last(iffi),
days_before_event = dplyr::last(days_before_event),
cumsum=dplyr::last(cumsum))
lbls
test
lbls
test
test = out_long[1:20,]
lbls = test %>%
group_by(iffi) %>%
summarise(iffi = dplyr::last(iffi),
days_before_event = dplyr::last(days_before_event),
cumsum=dplyr::last(cumsum))
lbls
test = out_long[1:40,]
lbls = test %>%
group_by(iffi) %>%
summarise(iffi = dplyr::last(iffi),
days_before_event = dplyr::last(days_before_event),
cumsum=dplyr::last(cumsum))
lbls
lbls = test %>%
group_by(iffi) %>%
summarise(iffi = dplyr::last(iffi),
days_before_event = dplyr::last(days_before_event),
cumsum=dplyr::last(cumsum))
lbls
ggplot(out_long, (aes(x=days_before_event, y=cumsum,group=iffi))) +
geom_line() +
geom_text_repel(data=lbls, aes(label=iffi))
ggplot(out_long, (aes(x=days_before_event, y=cumsum,group=iffi))) +
geom_line() +
geom_text_repel(data=lbls, aes(label=iffi)) +
scale_x_reverse()
lbls = out_long %>%
group_by(iffi) %>%
summarise(iffi = dplyr::last(iffi),
days_before_event = dplyr::last(days_before_event),
cumsum=dplyr::last(cumsum))
ggplot(out_long, (aes(x=days_before_event, y=cumsum,group=iffi))) +
geom_line() +
geom_text_repel(data=lbls, aes(label=iffi)) +
scale_x_reverse()
lbls
out_long %>% filter(iffi==900100)
View(out_long)
lbls = out_long %>%
group_by(iffi) %>%
summarise(iffi = dplyr::last(iffi),
days_before_event = dplyr::last(days_before_event),
cumsum=dplyr::last(cumsum))
ggplot(out_long, (aes(x=days_before_event, y=cumsum,group=iffi))) +
geom_line() +
geom_text_repel(data=lbls, aes(label=iffi)) +
scale_x_reverse()
ggplot(out_long, (aes(x=days_before_event, y=cumsum,group=iffi))) +
geom_line() +
scale_x_reverse()
# all must have the same frequency
ggplot(out_long) +
geom_hist(aes(x=days_before_event))
# all must have the same frequency
ggplot(out_long) +
geom_histogram(aes(x=days_before_event))
