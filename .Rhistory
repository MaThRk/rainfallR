values(precip_raster)
precip_raster
# get the raster
precip_raster_stack = raster::stack(path_to_nc)
values(precip_raster)
getValues(precip_raster)
precip_raster
plot(precip_raster)
# get the raster
precip_raster_stack = raster::stack(path_to_nc)
precip_raster
# get the path to the nc file
path_to_nc = rainfallR::get_nc_paths(path_ncdf, day = as.Date("2016-01-12"), days_back = 1)[[1]]
path_to_nc
# get the raster
precip_raster_stack = raster::stack(path_to_nc)
precip_raster_stack
# get the right date
precip_raster = precip_raster_stack[[12]]
# transform the
spatial.obj4326 = st_transform(spatial.obj, 4326)
# transform the raster
precip_raster = projectRaster(precip_raster, crs="+proj=longlat +ellps=WGS84 +datum=WGS84 +no_defs")
# transform the raster
precip_raster = projectRaster(precip_raster, crs="+proj=longlat +ellps=WGS84 +datum=WGS84 +no_defs")
# what have we got?
pal = colorNumeric(c("#0C2C84", "#41B6C4", "#FFFFCC"), values(precip_raster),
na.color = "transparent")
pal()
pal
leaflet() %>%
addTiles() %>%
setView(lng = st_coordinates(spatial.obj4326)[,1][[1]],
lat = st_coordinates(spatial.obj4326)[,2][[1]],
zoom=15) %>%
addPolygons(data = spatial.obj4326, group="shape") %>%
addRasterImage(precip_raster, group = "precip", colors=pal) %>%
addLegend(pal=pal, values=values(precip_raster)) %>%
addLayersControl(overlayGroups = c("shape", "precip")) %>%
hideGroup("precip")
poly_path = "\\\\projectdata.eurac.edu/projects/Proslide/Landslides/Iffi_db_xxxx_to_2018/exportperEurac2020/Shapefiles/IFFI10_5.shp"
# read it with sf
spatial.obj = read_sf(poly_path)
# get only one landslide
spatial.obj = spatial.obj[1,]
# get the path to the nc file
path_to_nc = rainfallR::get_nc_paths(path_ncdf, day = as.Date("2016-01-12"), days_back = 1)[[1]]
# get the raster
precip_raster_stack = raster::stack(path_to_nc)
# get the right date
precip_raster = precip_raster_stack[[12]]
# # crop to the shape
# crop = raster::crop(precip_raster, spatial.obj)
# precip_raster = raster::mask(crop, spatial.obj)
# transform the
spatial.obj4326 = st_transform(spatial.obj, 4326)
# transform the raster
precip_raster = projectRaster(precip_raster, crs="+proj=longlat +ellps=WGS84 +datum=WGS84 +no_defs")
# what have we got?
pal = colorNumeric(c("#0C2C84", "#41B6C4", "#FFFFCC"), values(precip_raster),
na.color = "transparent")
leaflet() %>%
addTiles() %>%
setView(lng = st_coordinates(spatial.obj4326)[,1][[1]],
lat = st_coordinates(spatial.obj4326)[,2][[1]],
zoom=15) %>%
addPolygons(data = spatial.obj4326, group="shape") %>%
addRasterImage(precip_raster, group = "precip", colors=pal) %>%
addLegend(pal=pal, values=values(precip_raster)) %>%
addLayersControl(overlayGroups = c("shape", "precip")) %>%
hideGroup("precip")
dts
res_poly = get_rainfall(spatial.obj = spatial.obj,
dts=dts, fun=mean)
res_poly
res_poly_accumulated = get_cumulative_rainfall(res_poly)
ggplot(res_poly_accumulated[[1]]) +
geom_col(aes(dates, accumulated))
devtools::load_all()
ggplot(res_poly_accumulated[[1]]) +
geom_col(aes(dates, precip))
ggplot(res_poly_accumulated[[1]]) +
geom_col(aes(dates, precip)) +
geom_col(aes(dates, accumualted), col="red")
ggplot(res_poly_accumulated[[1]]) +
geom_col(aes(dates, precip)) +
geom_col(aes(dates, accumulated), col="red")
ggplot(res_poly_accumulated[[1]]) +
geom_col(aes(dates, precip)) +
geom_col(aes(dates, accumulated), fill="red")
ggplot(res_poly_accumulated[[1]]) +
geom_col(aes(dates, precip))
ggplot(res_poly_accumulated[[1]]) +
geom_col(aes(dates, precip)) +
theme_light()
res_poly = get_rainfall(spatial.obj = spatial.obj,
dts=dts, fun=mean,
days_back = 12)
res_poly_accumulated = get_cumulative_rainfall(res_poly)
ggplot(res_poly_accumulated[[1]]) +
geom_col(aes(dates, precip)) +
theme_light()
ggplot(res_poly_accumulated[[1]]) +
geom_col(aes(dates, precip)) +
theme_light() +
labs(title="Precipitation in that landslide area before the 12th of Jan. 2016")
ggplot(res_poly_accumulated[[1]]) +
geom_col(aes(dates, precip)) +
theme_light() +
labs(title="Precipitation in that landslide area before the 12th of Jan. 2016")
devtools::build_vignettes()
pkgdown::build_site()
devtools::build_vignettes()
pkgdown::build_article()
pkgdown::build_articles()
pkgdown::build_article(name = "vignettes/example_bozen.Rmd")
pkgdown::build_article(name = "Extracting data for bozen")
pkgdown::build_site()
devtools::build_v
devtools::build_vignettes()
devtools::load_all()
browseVignettes(package = "rainfallR")
pkgdown::build_site()
devtools::build_vignettes()
devtools::load_all()
browseVignettes(package = "rainfallR")
pkgdown::build_site()
browseVignettes(package = "rainfallR")
devtools::build_vignettes()
devtools::build_vignettes()
browseVignettes(package = "rainfallR")
pkgdown::build_site()
browseVignettes("rainfallR")
devtools::load_all()
browseVignettes("rainfallR")
vignette("example_bozen")
?get_rainfall
file.edit("DESCRIPTION")
usethis::use_data()
library(sf)
data = read_sf("../../../Desktop/bolzano.gpkg")
usethis::use_data(data)
library(sf)
bozen = read_sf("../../../Desktop/bolzano.gpkg")
usethis::use_data(bozen)
remove.packages("Rcpp")
library(Rcpp)
install.packages("Rcpp")
install.packages("Rcpp")
library(Rcpp)
library(RcppArmadillo)
library(Rcpp)
remotes::install_github("RobinKohrs/rainfallR")
devtools::load_all()
file.edit("R/utils.R")
file.edit("R/get_raster_list_n_month.R")
file.edit("R/get_rainfall.R")
file.edit("R/get_raster_list_one_month.R")
devtools::document()
file.edit("R/get_rainfall.R")
devtools::document()
file.edit("NAMESPACE")
file.edit
file.edit("R/get_raster_list_n_month.R")
file.edit("R/get_raster_list_one_month.R")
file.edit("R/utils.R")
file.edit("R/get_cumulatitve_rainfall.R")
file.edit("NAMESPACE")
devtools::document()
devtools::document()
file.edit("NAMESPACE")
file.edit("R/get_rainfall.R")
file.edit("R/utils.R")
devtools::document()
file.edit("NAMESPACE")
rm(list=c("bozen"))
devtools::document()
devtools::document()
file.edit("NAMESPACE")
file.edit("README.md")
file.edit("doc/example_bozen.Rmd")
library(stars)
library(here)
library(sf)
library(dplyr)
library(tidyverse)
library(tidyverse)
library(raster)
library(stars)
path_ncdf = "\\\\projectdata.eurac.edu/projects/Proslide/PREC_GRIDS/"
year = 2016
month = 08
path_ncdf = "\\\\projectdata.eurac.edu/projects/Proslide/PREC_GRIDS/"
path_source_points = "\\\\projectdata.eurac.edu\projects\Proslide\Landslides\Iffi_db_xxxx_to_2018\exportperEurac2020\Shapefiles\IFFI10_1.shp"
path_ncdf = "\\\\projectdata.eurac.edu/projects/Proslide/PREC_GRIDS/"
path_source_points = "\\\\projectdata.eurac.edu/projects/Proslide/Landslides/Iffi_db_xxxx_to_2018/exportperEurac2020/Shapefiles/IFFI10_1.shp"
file.edit("R/get_rainfall.R")
# build the path to the netcdf
path_ncdf = paste0(data_path, year, "/", "DAILYPCP_", year, formatC(month, flag = 0, width = 2), ".nc")
# build the path to the netcdf
path_ncdf = paste0(path_ncdf, year, "/", "DAILYPCP_", year, formatC(month, flag = 0, width = 2), ".nc")
path_ncdf
points = st_read(path_source_points)
raster = read_stars(path_ncdf)
raster
plot(raster)
library(rainfallR)
library(ncdf4)
# get the dates
ncin = ncdf4::nc_open(path_ncdf)
dates = rainfallR::get_dates_ncdf(ncin)
dates
ras = read_stars(path_ncdf)
ras
ras$DAILYPCP_201608.nc
dim(ras$DAILYPCP_201608.nc)
ras
attributes(ras)
read_ncdf(path_ncdf)
a = read_ncdf(path_ncdf)
a
a$precipitation
ras = read_ncdf(path_ncdf)
# sclice
dplyr::slice(ras, index=16, along="DATE")
# sclice
single_day = dplyr::slice(ras, index=16, along="DATE")
class(single_day)
plot(single_day)
ggplot() +
geom_stars(single_day)
ggplot() +
geom_stars(data = single_day)
ggplot() +
geom_stars(data = single_day)
ggplot() +
geom_stars(data = single_day) +
coord_equal()
# sclice
single_day = dplyr::slice(ras, index=c(16,18), along="DATE")
single_day
ggplot() +
geom_stars(data = single_day) +
coord_equal() +
facet_wrap(~DATE)
plot(single_day)
single_day
# sclice
three_days = dplyr::slice(ras, index=c(14,15,16), along="DATE")
# plot it normally
plot(three_days)
three days
library(spacetime)
stplot(three_days)
s = as(three_days, "STFDF")
a
s
ncin
s = as(ncin, "STFDF")
nc = read_stars(path_ncdf)
s = as(nc, "STFDF")
s
ras = read_stars(path_ncdf)
# get the dates
ncin = ncdf4::nc_open(path_ncdf)
# sclice
three_days = dplyr::slice(ras, index=c(14,15,16), along="DATE")
# plot it normally
plot(three_days)
df = as.data.frame(ras)
df
head(df)
as.data.frame(three_days)
df = as.data.frame(three_days)
names(df)
ggplot() +
geom_stars(data = three_days) +
coord_equal() +
facet_wrap(~DATE)
ggplot() +
geom_stars(data = three_days, aes(fill = DAILYPCP_201608.nc)) +
coord_equal() +
facet_wrap(~DATE)
ggplot() +
geom_stars(data = three_days, aes(x=x, y=y, fill = DAILYPCP_201608.nc)) +
coord_equal() +
facet_wrap(~DATE)
ggplot() +
geom_stars(data = three_days, aes(x=x, y=y, fill = DAILYPCP_201608.nc)) +
scale_fill_manual(name="hi")
ggplot() +
geom_stars(data = three_days, aes(x=x, y=y, fill = DAILYPCP_201608.nc)) +
scale_fill_continuous(name="prcip [mm/day]") +
coord_equal() +
facet_wrap(~DATE)
dates
dates[c(14,15,16)]
d = dates[c(14,15,16)]
d = dates[c(14,15,16)]
d_labeller = as_labeller(d)
d_labeller()
d = dates[c(14,15,16)]
three_days
dim(three_days)
dim(three_days)
thee_days
three_days
three_days$DATE
df = as.data.frame(three_days)
df
head(df)
# plot it normally
plot(three_days)
# plot it normally
plot(three_days)
class(three_days)
# sclice
three_days = dplyr::slice(ras, index=c(14,15,16), along="DATE")
# plot it normally
plot(three_days)
points = st_read(path_source_points)
points = st_read(path_source_points)
ras = read_stars(path_ncdf)
ras
ras = st_set_dimensions(ras, which = "DD", dates)
ras = st_set_dimensions(ras, which = "DATE", dates)
ras
# change the DATE dimension
ras = st_set_dimensions(ras, which = "DATE", dates)
# sclice
three_days = dplyr::slice(ras, index=c(14,15,16), along="DATE")
# plot it normally
plot(three_days)
ggplot() +
geom_stars(data = three_days, aes(x=x, y=y, fill = DAILYPCP_201608.nc)) +
scale_fill_continuous(name="prcip [mm/day]") +
coord_equal() +
facet_wrap(~DATE)
ggplot() +
geom_stars(data = three_days, aes(x=x, y=y, fill = DAILYPCP_201608.nc)) +
scale_fill_continuous(name="precip [mm/day]") +
coord_equal() +
facet_wrap(~DATE) +
theme_light()
ggplot() +
geom_stars(data = three_days, aes(x=x, y=y, fill = DAILYPCP_201608.nc)) +
scale_fill_continuous(name="precip [mm/day]", na.value="transparent") +
coord_equal() +
facet_wrap(~DATE) +
theme_light()
three_days
r = dplyr::slice(ras, index=c(16), along="DATE")
ggplot() +
ggplot() +
geom_sf(points)
ggplot() +
geom_sf(data = points)
ggplot() +
geom_stars(data=r, aes(x = x, y = y, fill=DAILYPCP_201608.nc)) +
scale_fill_continuous(name="precip [mm/day]", na.value="transparent") +
geom_sf(data = points)
ggplot() +
geom_stars(data=r, aes(x = x, y = y, fill=DAILYPCP_201608.nc)) +
scale_fill_continuous(name="precip [mm/day]", na.value="transparent") +
geom_sf(data = points, alpha=.4, size=.4)
ggplot() +
geom_stars(data=r, aes(x = x, y = y, fill=DAILYPCP_201608.nc)) +
scale_fill_continuous(name="precip [mm/day]", na.value="transparent") +
geom_sf(data = points, alpha=.4, size=.4, aes(color="Mass Movements"))
ggplot() +
geom_stars(data=r, aes(x = x, y = y, fill=DAILYPCP_201608.nc)) +
scale_fill_continuous(name="precip [mm/day]", na.value="transparent") +
geom_sf(data = points, alpha=.4, size=.4, aes(color="Mass Movements")) +
labs(colour="")
ggplot() +
geom_stars(data=r, aes(x = x, y = y, fill=DAILYPCP_201608.nc)) +
scale_fill_continuous(name="precip [mm/day]", na.value="transparent") +
geom_sf(data = points, alpha=.4, size=.4, aes(color="Mass Movements")) +
labs(colour="".
ggplot() +
geom_stars(data=r, aes(x = x, y = y, fill=DAILYPCP_201608.nc)) +
scale_fill_continuous(name="precip [mm/day]", na.value="transparent") +
geom_sf(data = points, alpha=.4, size=.4, aes(color="Mass Movements")) +
labs(colour="",
title="Rainfall [mm] on the 16.08.2016")
ggplot() +
geom_stars(data=r, aes(x = x, y = y, fill=DAILYPCP_201608.nc)) +
scale_fill_continuous(name="precip [mm/day]", na.value="transparent") +
geom_sf(data = points, alpha=.4, size=.4, aes(color="Mass Movements")) +
coord_equal() +
labs(colour="",
title="Rainfall [mm] on the 16.08.2016")
ggplot() +
geom_stars(data=r, aes(x = x, y = y, fill=DAILYPCP_201608.nc)) +
scale_fill_continuous(name="precip [mm/day]", na.value="transparent") +
geom_sf(data = points, alpha=.4, size=.4, aes(color="Mass Movements")) +
labs(colour="",
title="Rainfall [mm] on the 16.08.2016")
r
crs(r)
st_crs(r)
st_crs(r) = 4326
st_crs(r)
st_crs(r) = 32632
st_crs(r)
ggplot() +
geom_stars(data=r, aes(x = x, y = y, fill=DAILYPCP_201608.nc)) +
scale_fill_continuous(name="precip [mm/day]", na.value="transparent") +
geom_sf(data = points, alpha=.4, size=.4, aes(color="Mass Movements")) +
labs(colour="",
title="Rainfall [mm] on the 16.08.2016")
st_crs(points)
st_crs(points) = 32632
ggplot() +
geom_stars(data=r, aes(x = x, y = y, fill=DAILYPCP_201608.nc)) +
scale_fill_continuous(name="precip [mm/day]", na.value="transparent") +
geom_sf(data = points, alpha=.4, size=.4, aes(color="Mass Movements")) +
labs(colour="",
title="Rainfall [mm] on the 16.08.2016")
ggplot() +
geom_stars(data=r, aes(x = x, y = y, fill=DAILYPCP_201608.nc)) +
scale_fill_continuous(name="precip [mm/day]", na.value="transparent") +
geom_sf(data = points, alpha=.4, size=.4, aes(color="Mass Movements")) +
coord_equal() +
labs(colour="",
title="Rainfall [mm] on the 16.08.2016")
ggplot() +
geom_stars(data=r, aes(x = x, y = y, fill=DAILYPCP_201608.nc)) +
scale_fill_continuous(name="precip [mm/day]", na.value="transparent") +
geom_sf(data = points, alpha=.4, size=.4, aes(color="Mass Movements")) +
coord_sf() +
labs(colour="",
title="Rainfall [mm] on the 16.08.2016")
plot(r)
plot(r, axes=T)
ggplot() +
geom_stars(data=r, aes(x = x, y = y, fill=DAILYPCP_201608.nc))
geom_stars(data=r, aes(x = x, y = y, fill=DAILYPCP_201608.nc))
ggplot() +
geom_stars(data=r, aes(x = x, y = y, fill=DAILYPCP_201608.nc))
ggplot() +
geom_stars(data=r, aes(x = x, y = y, fill=DAILYPCP_201608.nc)) +
scale_fill_continuous(name="precip [mm/day]", na.value="transparent") +
geom_sf(data = points, alpha=.4, size=.4, aes(color="Mass Movements"))
?geom_sf
plot(points)
plot(st_geometry(points), axes=T)
ggplot() +
geom_stars(data=r, aes(x = x, y = y, fill=DAILYPCP_201608.nc)) +
scale_fill_continuous(name="precip [mm/day]", na.value="transparent") +
geom_sf(data = points, alpha=.4, size=.4, aes(color="Mass Movements")) +
labs(colour="",
title="Rainfall [mm] on the 16.08.2016")
ggplot() +
geom_stars(data=r, aes(x = x, y = y, fill=DAILYPCP_201608.nc)) +
scale_fill_continuous(name="precip [mm/day]", na.value="transparent") +
geom_sf(data = points, alpha=.4, size=.4, aes(color="Mass Movements")) +
labs(colour="",
title="Rainfall [mm] on the 16.08.2016")
ggsave("data/readmeplot.png")
file.edit()
file.edit("README.md")
pkgdown::build_site()
library(rainfallR)
library(here)
library(sf)
library(dplyr)
library(tmap)
library(mapview)
library(tidyverse)
library(raster)
library(leaflet)
# then we need a path to a spatial object (shape, geopackage...)
# path_spatial = here(... = "../../../Desktop/bolzano.gpkg")
# spatial.obj = read_sf(path_spatial)
spatial.obj = bozen
pkgdown::build_site()
library(rainfallR)
bozen
class(bozen)
pkgdown::build_site()
pkgdown::build_site()
library(rainfallR)
library(here)
library(sf)
library(dplyr)
library(tmap)
library(tmap)
library(mapview)
library(tidyverse)
library(raster)
library(tidyverse)
library(raster)
library(leaflet)
- first we need to set some paths
```{r}
# the path to the directory of the NetCDFs which are stored for each month
path_ncdf = "\\\\projectdata.eurac.edu/projects/Proslide/PREC_GRIDS/"
# then we need a path to a spatial object (shape, geopackage...)
# path_spatial = here(... = "../../../Desktop/bolzano.gpkg")
# spatial.obj = read_sf(path_spatial)
spatial.obj = bozen
# then we need a path to a spatial object (shape, geopackage...)
# path_spatial = here(... = "../../../Desktop/bolzano.gpkg")
# spatial.obj = read_sf(path_spatial)
spatial.obj = bozen
- check to see if we are in the right location
```{r, echo=F}
data(World)
tmap_mode("view")
tm_shape(spatial.obj) +
tm_dots()
