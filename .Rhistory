mutate(accumulated = cumsum(precip)) %>%
mutate(geom = geom) %>%
st_as_sf()
# put back in the output list
out[[i]] = df_long
}
}else{
out = vector("list", length = length(res))
# for each date
for (day in seq_along(res)) {
# make one df in long format
geom = res[[day]] %>% select(iffi)
day = res[[day]] %>% st_drop_geometry()
df_long = day %>% pivot_longer(!iffi, names_to="date", values_to="precip")
# match the geom_back
df_long = merge(df_long, geom, by="iffi")
# calculate the accumulated precip
df_long = df_long
# calculate the cumulative sum
df_long = df_long %>%
group_by(iffi) %>%
mutate(cumsum = cumsum(precip))
out[[day]] == df_long
}
}
}
a = make_cumulative_rainfall(res)
out = vector("list", length = length(res))
# for each date
for (day in seq_along(res)) {
# make one df in long format
geom = res[[day]] %>% select(iffi)
day = res[[day]] %>% st_drop_geometry()
df_long = day %>% pivot_longer(!iffi, names_to="date", values_to="precip")
# match the geom_back
df_long = merge(df_long, geom, by="iffi")
# calculate the accumulated precip
df_long = df_long
# calculate the cumulative sum
df_long = df_long %>%
group_by(iffi) %>%
mutate(cumsum = cumsum(precip))
out[[day]] == df_long
}
day
day = 1
# make one df in long format
geom = res[[day]] %>% select(iffi)
day = res[[day]] %>% st_drop_geometry()
day
df_long = day %>% pivot_longer(!iffi, names_to="date", values_to="precip")
df_long
# match the geom_back
df_long = merge(df_long, geom, by="iffi")
# calculate the accumulated precip
df_long = df_long
# calculate the cumulative sum
df_long = df_long %>%
group_by(iffi) %>%
mutate(cumsum = cumsum(precip))
out[[day]] = df_long
day
#' @export
make_cumulative_rainfall = function(res, cumsum=T){
# if there are more than one points or polygons
if(nrow(res[[1]]) == 1){
cat("Extracting data for a single geometry")
# the output list
out = vector("list", length=length(res))
names(out) = names(res)
# for each element in the res list, get the dataframe
for (i in seq_along(res)) {
df = res[[i]]
# get the geometry column
geom = df %>% st_geometry()
df_long = df %>%
st_drop_geometry() %>%
pivot_longer(cols = everything(), names_to="dates", values_to="precip") %>%
mutate(dates = as.Date(dates, "%Y%m%d")) %>%
# get the cumulative count for the days
mutate(accumulated = cumsum(precip)) %>%
mutate(geom = geom) %>%
st_as_sf()
# put back in the output list
out[[i]] = df_long
}
}else{
out = vector("list", length = length(res))
# for each date
for (i in seq_along(res)) {
# make one df in long format
geom = res[[i]] %>% select(iffi)
day = res[[i]] %>% st_drop_geometry()
df_long = day %>% pivot_longer(!iffi, names_to="date", values_to="precip")
# match the geom_back
df_long = merge(df_long, geom, by="iffi")
# calculate the accumulated precip
df_long = df_long
# calculate the cumulative sum
df_long = df_long %>%
group_by(iffi) %>%
mutate(cumsum = cumsum(precip))
out[[i]] = df_long
}
}
}
a = make_cumulative_rainfall(res)
a
res
out = vector("list", length = length(res))
out
# for each date
for (i in seq_along(res)) {
# make one df in long format
geom = res[[i]] %>% select(iffi)
day = res[[i]] %>% st_drop_geometry()
df_long = day %>% pivot_longer(!iffi, names_to="date", values_to="precip")
# match the geom_back
df_long = merge(df_long, geom, by="iffi")
# calculate the accumulated precip
df_long = df_long
# calculate the cumulative sum
df_long = df_long %>%
group_by(iffi) %>%
mutate(cumsum = cumsum(precip))
out[[i]] = df_long
}
out
#' @export
make_cumulative_rainfall = function(res, cumsum=T){
# if there are more than one points or polygons
if(nrow(res[[1]]) == 1){
cat("Extracting data for a single geometry")
# the output list
out = vector("list", length=length(res))
names(out) = names(res)
# for each element in the res list, get the dataframe
for (i in seq_along(res)) {
df = res[[i]]
# get the geometry column
geom = df %>% st_geometry()
df_long = df %>%
st_drop_geometry() %>%
pivot_longer(cols = everything(), names_to="dates", values_to="precip") %>%
mutate(dates = as.Date(dates, "%Y%m%d")) %>%
# get the cumulative count for the days
mutate(accumulated = cumsum(precip)) %>%
mutate(geom = geom) %>%
st_as_sf()
# put back in the output list
out[[i]] = df_long
}
}else{
out = vector("list", length = length(res))
# for each date
for (i in seq_along(res)) {
# make one df in long format
geom = res[[i]] %>% select(iffi)
day = res[[i]] %>% st_drop_geometry()
df_long = day %>% pivot_longer(!iffi, names_to="date", values_to="precip")
# match the geom_back
df_long = merge(df_long, geom, by="iffi")
# calculate the accumulated precip
df_long = df_long
# calculate the cumulative sum
df_long = df_long %>%
group_by(iffi) %>%
mutate(cumsum = cumsum(precip))
out[[i]] = df_long
}
}
return(out)
}
a = make_cumulative_rainfall(res)
a
dplyr::gather
?gather
es
res
day = res[[1]]
# get the geom of type sfc_polygon "sfc"
geom = st_geometry(day)
# seperate the dataframe
day = day %>% st_drop_geometry()
day
names(day)
names(day)
grep(names(day), pattern = "\\d{8}", value = T)
dates = grep(names(day), pattern = "\\d{8}", value = T) %>% as.Date("%Y%m%d")
dates
# how many days in total are we observing (days_back + 1)
l = dim(day)[[2]]
l
head(day)
# this is the list that eventually will be the column in the dataframe
acc_list = vector("list", length = nrow(day))
#' Reshape the dataframe and create cumulative count column
#'
#' @importFrom tidyr pivot_longer
#'
#' @param res an object as retured from `get_rainfall`
#'
#' @return a list of `dataframes` for each date with the cumulative amount for each day as column and the dates as another column.
#'
#' @export
get_cumulative_rainfall = function(res, cumsum=T){
# if there are more than one points or polygons
if(nrow(res[[1]]) == 1){
cat("Extracting data for a single geometry")
# the output list
out = vector("list", length=length(res))
names(out) = names(res)
# for each element in the res list, get the dataframe
for (i in seq_along(res)) {
df = res[[i]]
# get the geometry column
geom = df %>% st_geometry()
df_long = df %>%
st_drop_geometry() %>%
pivot_longer(cols = everything(), names_to="dates", values_to="precip") %>%
mutate(dates = as.Date(dates, "%Y%m%d")) %>%
# get the cumulative count for the days
mutate(accumulated = cumsum(precip)) %>%
mutate(geom = geom) %>%
st_as_sf()
# put back in the output list
out[[i]] = df_long
}
}else{
# how to do it for many?
cat("Multiple geometries queried..\nOutput will be a list of dataframes (one for each day).\nThe accumulated rainfall is stored a list column")
# also create an output list beeing the length of res (the number of dates)
out = vector("list", length = length(res))
# for each date (which is a dataframe)
counter = 1 # forgot to use seq_along...
for (day in res) {
# get the geom of type sfc_polygon "sfc"
geom = st_geometry(day)
# seperate the dataframe
day = day %>% st_drop_geometry()
# get the dates
dates = grep(names(day), pattern = "\\d{8}", value = T) %>% as.Date("%Y%m%d")
# how many days in total are we observing (days_back + 1)
l = dim(day)[[2]] - 1 # minus one for the iffi column
# this is the list that eventually will be the column in the dataframe
acc_list = vector("list", length = nrow(day))
# go over the polygons
for (row in 1:nrow(day)) {
# for each polygon (row) create a vector of accumulated rainfall
acc_vector = vector(length = l)
# for each col minus the geometry
for (col in 1:l) {
precip = day[row,col]
acc_vector[[col]] = round(sum(acc_vector) + precip, 2)
}
# name the vector
names(acc_vector) = dates
# for each polygon add the acc_vector to the acc_list
acc_list[[row]] = acc_vector
}
# add the list as list column to the dataframe
day[["accumulated"]] = acc_list
# add the geom
day[["geom"]] = geom
# make it an object of class sf
day = st_as_sf(day)
# put it back in the out_list
out[[counter]] = day
counter = counter + 1
}
}
return(out)
}
res2 = get_cumulative_rainfall(res)
res2
res2 %>% filter(iffi==59630200)
res2[[1]] %>% filter(iffi==59630200)
# get the geom of type sfc_polygon "sfc"
geom = st_geometry(day)
day = res[[1]]
# get the geom of type sfc_polygon "sfc"
geom = st_geometry(day)
# seperate the dataframe
day = day %>% st_drop_geometry()
# get the dates
dates = grep(names(day), pattern = "\\d{8}", value = T) %>% as.Date("%Y%m%d")
dates
# how many days in total are we observing (days_back + 1)
l = dim(day)[[2]] - 1 # minus one for the iffi column
l
# this is the list that eventually will be the column in the dataframe
acc_list = vector("list", length = nrow(day))
acc_list
dim(day)
# how many days in total are we observing (days_back + 1)
l = dim(day)[[2]] - 1 # minus one for the iffi column
l
# this is the list that eventually will be the column in the dataframe
acc_list = vector("list", length = nrow(day))
row=1
col=1
acc_vector = vector(length = l)
acc_vector
precip = day[row,col]
precip
# for each col minus the geometry
for (col in 1:l) {
precip = day[row,col]
acc_vector[[col]] = round(sum(acc_vector) + precip, 2)
}
acc_vector
head(day)
col
col=1
head(day)
# for each col minus the geometry
for (col in 1:l) {
precip = day[row,col]
print(precip)
acc_vector[[col]] = round(sum(acc_vector) + precip, 2)
}
acc_vector
# for each polygon (row) create a vector of accumulated rainfall
acc_vector = vector(length = l)
col=1
# for each col minus the geometry
for (col in 1:l) {
precip = day[row,col]
print(precip)
acc_vector[[col]] = round(sum(acc_vector) + precip, 2)
}
acc_vector
# for each polygon (row) create a vector of accumulated rainfall
acc_vector = vector(length = l)
# for each col minus the geometry
for (col in 1:l) {
precip = day[row,col]
print(precip)
print(sum(acc_vector))
acc_vector[[col]] = round(sum(acc_vector) + precip, 2)
}
rep(0,5)
rep(0,l)
# for each polygon (row) create a vector of accumulated rainfall
acc_vector = vector(rep(0), l)
# for each col minus the geometry
for (col in 1:l) {
precip = day[row,col]
acc_vector[[col]] = round(sum(acc_vector) + precip, 2)
}
acc_vector = rep(0,l)
acc_vector
# for each col minus the geometry
for (col in 1:l) {
precip = day[row,col]
acc_vector[[col]] = round(sum(acc_vector) + precip, 2)
}
acc_vector
# for each polygon (row) create a vector of accumulated rainfall
acc_vector = rep(0,l)
col = 1
precip = day[row,col]
precip
print(precip)
round(sum(acc_vector) + precip, 2)
# for each polygon (row) create a vector of accumulated rainfall
acc_vector = rep(0,l)
# for each col minus the geometry
for (col in 1:l) {
precip = day[row,col]
print(precip)
if(col == 1){
acc_vector[[col]] = precip
} else{
acc_vector[[col]] = acc_vector[[i-1]] + precip
}
}
# for each polygon (row) create a vector of accumulated rainfall
acc_vector = rep(0,l)
# for each col minus the geometry
for (col in 1:l) {
precip = day[row,col]
print(precip)
if(col == 1){
acc_vector[[col]] = precip
} else{
acc_vector[[col]] = acc_vector[[col-1]] + precip
}
}
acc_vector
#' Reshape the dataframe and create cumulative count column
#'
#' @importFrom tidyr pivot_longer
#'
#' @param res an object as retured from `get_rainfall`
#'
#' @return a list of `dataframes` for each date with the cumulative amount for each day as column and the dates as another column.
#'
#' @export
get_cumulative_rainfall = function(res, cumsum=T){
# if there are more than one points or polygons
if(nrow(res[[1]]) == 1){
cat("Extracting data for a single geometry")
# the output list
out = vector("list", length=length(res))
names(out) = names(res)
# for each element in the res list, get the dataframe
for (i in seq_along(res)) {
df = res[[i]]
# get the geometry column
geom = df %>% st_geometry()
df_long = df %>%
st_drop_geometry() %>%
pivot_longer(cols = everything(), names_to="dates", values_to="precip") %>%
mutate(dates = as.Date(dates, "%Y%m%d")) %>%
# get the cumulative count for the days
mutate(accumulated = cumsum(precip)) %>%
mutate(geom = geom) %>%
st_as_sf()
# put back in the output list
out[[i]] = df_long
}
}else{
# how to do it for many?
cat("Multiple geometries queried..\nOutput will be a list of dataframes (one for each day).\nThe accumulated rainfall is stored a list column")
# also create an output list beeing the length of res (the number of dates)
out = vector("list", length = length(res))
# for each date (which is a dataframe)
counter = 1 # forgot to use seq_along...
for (day in res) {
# get the geom of type sfc_polygon "sfc"
geom = st_geometry(day)
# seperate the dataframe
day = day %>% st_drop_geometry()
# get the dates
dates = grep(names(day), pattern = "\\d{8}", value = T) %>% as.Date("%Y%m%d")
# how many days in total are we observing (days_back + 1)
l = dim(day)[[2]] - 1 # minus one for the iffi column
# this is the list that eventually will be the column in the dataframe
acc_list = vector("list", length = nrow(day))
# go over the polygons
for (row in 1:nrow(day)) {
# for each polygon (row) create a vector of accumulated rainfall
acc_vector = rep(0,l)
# for each col minus the geometry
for (col in 1:l) {
precip = day[row,col]
print(precip)
if(col == 1){
acc_vector[[col]] = precip
} else{
acc_vector[[col]] = acc_vector[[col-1]] + precip
}
}
# name the vector
names(acc_vector) = dates
# for each polygon add the acc_vector to the acc_list
acc_list[[row]] = acc_vector
}
# add the list as list column to the dataframe
day[["accumulated"]] = acc_list
# add the geom
day[["geom"]] = geom
# make it an object of class sf
day = st_as_sf(day)
# put it back in the out_list
out[[counter]] = day
counter = counter + 1
}
}
return(out)
}
res2 = get_cumulative_rainfall(res)
res2
a = res2[[1]]
a %>% filter(iffi==acc_vector[[col]] = round(sum(acc_vector) + precip, 2))
a %>% filter(iffi==59630200)
devtools::document()
rm(list=ls())
devtools::document()
file.edit("NAMESPACE")
spatial.obj = st_read(path)
path = "\\\\projectdata.eurac.edu/projects/Proslide/Landslides/Iffi_db_xxxx_to_2018/exportperEurac2020/Shapefiles/IFFI10_1.shp"
spatial.obj = st_read(path)
spatial.obj = spatial.obj[50,]
fun
devtools::load_all()
dts
dts = as.Date("2019-01-01")
res = get_rainfall(spatial.obj = spatial.obj,dts=dts, days_back = 7)
dts = as.Date("2018-01-01")
res = get_rainfall(spatial.obj = spatial.obj,dts=dts, days_back = 7)
res
spatial.obj
spatial.obj = spatial.obj[50,]
spatial.obj = st_read(path)
spatial.obj = spatial.obj[50,]
spatial.obj
spatial.obj = spatial.obj[1:50,]
spatial.obj = st_read(path)
spatial.obj = spatial.obj[1:50,]
spatial.obj
res = get_rainfall(spatial.obj = spatial.obj,dts=dts, days_back = 7)
res
res2 = rainfallR::make_cumulative_rainfall(res)
res2
a = res[[1]]
a %>% filter(iffi==20171225  )
a %>% filter(iffi==20171225 ) %>% st_drop_geometry()
a
a %>% filter(iffi==260400) %>% st_drop_geometry()
ls
