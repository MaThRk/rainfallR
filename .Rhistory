# extract the date
ras = raster_brick[[idx]]
# put into the list
raster_list[[i]] = ras
}
dates_to_extract
# month of the date to extract
m = format(dates_to_extract[[i]], "%m")
y = format(dates_to_extract[[i]], "%y")
d = format(dates_to_extract[[i]], "%d")
# check based on the month
right_path = paths_to_data[grep(m, names(paths_to_data))]
# open the connection
ncin = ncdf4::nc_open(right_path[[1]])
# dates for this month
dates = get_dates_ncdf(ncin)
# get the index to extract
idx = format(dates_to_extract[[i]], "%d") %>% as.integer()
# read the brick --> this should not be done each time in the loop!!
raster_brick = raster::brick(right_path)
message(paste0("reading the data for date: "), c(y,m,d))
i = 1
# month of the date to extract
m = format(dates_to_extract[[i]], "%m")
y = format(dates_to_extract[[i]], "%y")
d = format(dates_to_extract[[i]], "%d")
# check based on the month
right_path = paths_to_data[grep(m, names(paths_to_data))]
# open the connection
ncin = ncdf4::nc_open(right_path[[1]])
# dates for this month
dates = get_dates_ncdf(ncin)
# get the index to extract
idx = format(dates_to_extract[[i]], "%d") %>% as.integer()
changed = T
if(changed){
print("read the brick")
# read the brick --> this should not be done each time in the loop!!
raster_brick = raster::brick(right_path)
if((m == format(dates_to_extract[[i+1]], "%m"))){
changed = FALSE
}else{
changed = TRUE
}
} else{
print("no change --> dont read the brick")
}
i = 2
# month of the date to extract
m = format(dates_to_extract[[i]], "%m")
y = format(dates_to_extract[[i]], "%y")
d = format(dates_to_extract[[i]], "%d")
# check based on the month
right_path = paths_to_data[grep(m, names(paths_to_data))]
# open the connection
ncin = ncdf4::nc_open(right_path[[1]])
# dates for this month
dates = get_dates_ncdf(ncin)
# get the index to extract
idx = format(dates_to_extract[[i]], "%d") %>% as.integer()
changed = T
format(dates_to_extract[[i+1]], "%m")
# for each date
changed = T
i
i = 1
# month of the date to extract
m = format(dates_to_extract[[i]], "%m")
y = format(dates_to_extract[[i]], "%y")
d = format(dates_to_extract[[i]], "%d")
# check based on the month
right_path = paths_to_data[grep(m, names(paths_to_data))]
# open the connection
ncin = ncdf4::nc_open(right_path[[1]])
# dates for this month
dates = get_dates_ncdf(ncin)
# get the index to extract
idx = format(dates_to_extract[[i]], "%d") %>% as.integer()
if(changed) {
print("read the brick")
# read the brick --> this should not be done each time in the loop!!
raster_brick = raster::brick(right_path)
if ((m == format(dates_to_extract[[i + 1]], "%m"))) {
changed = FALSE
} else{
changed = TRUE
}
} else{
print("no change --> dont read the brick")
}
i = 2
# month of the date to extract
m = format(dates_to_extract[[i]], "%m")
y = format(dates_to_extract[[i]], "%y")
d = format(dates_to_extract[[i]], "%d")
# check based on the month
right_path = paths_to_data[grep(m, names(paths_to_data))]
# open the connection
ncin = ncdf4::nc_open(right_path[[1]])
# dates for this month
dates = get_dates_ncdf(ncin)
# get the index to extract
idx = format(dates_to_extract[[i]], "%d") %>% as.integer()
changed
i = 1
m
m == format(dates_to_extract[[i + 1]], "%m")
if ((m == format(dates_to_extract[[i + 1]], "%m"))) {
changed = FALSE
} else{
changed = TRUE
}
changed
changed = TRUE
devtools::load_all()
data_path="\\\\projectdata.eurac.edu/projects/Proslide/PREC_GRIDS/"
path = "\\\\projectdata.eurac.edu/projects/Proslide/Landslides/Iffi_db_xxxx_to_2018/exportperEurac2020/Shapefiles/IFFI10_1.shp"
spatial.obj = st_read(path)
dts = c(as.Date("2016-01-12"), as.Date("2016-01-14"))
days_back = 15
# get the geometry type of the sf object
gtype = st_geometry_type(spatial.obj, by_geometry = FALSE) %>% as.character()
if(!gtype=="POINT"){
gtype="poly"
}  else{
gtype="point"
}
# for creating a sequence between two dates
if (seqq) {
dts = seq(dts[[1]], dts[[2]], by = "day")
}
# output will be a list of datafames
out = vector("list", length = length(dts))
# name the output
for (i in seq_along(out)) {
n = as.character(dts[[i]]) %>% str_replace_all(., "-", "")
names(out)[[i]] = n
}
##----------------------
##  WORK WITH NETCDF  --
##----------------------
# this assumes that the structure of the rainfall data will stay the same
# put the dates into a list as iterating over a vector loses class information..
dts = as.list(dts)
# get one example raster
y = format(dts[[1]], "%Y")
m = format(dts[[1]], "%m")
d = format(dts[[1]], "%d")
# example path
ex_path = paste0(data_path, y, "/", "DAILYPCP_", y, formatC(m, flag = 0, width = 2), ".nc")
# example raster
grd = raster(ex_path)[[1]]
grd[] = NA
# if not equal to crs of sf object stop/reproject here!
crs_nc = suppressWarnings(grd %>% crs() %>% attributes() %>% .[["projargs"]])
crs_shape = suppressWarnings(crs(spatial.obj) %>% crs() %>% attributes() %>% .[["projargs"]])
# if not equal, reproject the shape...
if(!crs_nc == crs_shape){
warning(sprintf("The CRS of the spatial object and the NetCDF are not equal Reprojecting the shape to: %s", crs_nc))
spatial.obj = st_transform(spatial.obj, crs_nc)
}
day = dts[[1]]
day
# get the year the month and the day
y = format(day, "%Y")
m = format(day, "%m")
d = format(day, "%d")
# create the path to the data for one month
paths_to_data = get_nc_paths(data_path, day, days_back)
paths_to_data
day
days_back
# get the max day back
min_day = (day - days_back)
# create a sequence
dates_to_extract = seq(min_day, day, by="day")
dates_to_extract
# one raster list for all dates in the end
raster_list = vector("list", length=length(dates_to_extract))
names(raster_list) = dates_to_extract
# for each date
changed = T
i = 1
# month of the date to extract
m = format(dates_to_extract[[i]], "%m")
y = format(dates_to_extract[[i]], "%y")
d = format(dates_to_extract[[i]], "%d")
# check based on the month
right_path = paths_to_data[grep(m, names(paths_to_data))]
# open the connection
ncin = ncdf4::nc_open(right_path[[1]])
# dates for this month
dates = get_dates_ncdf(ncin)
# get the index to extract
idx = format(dates_to_extract[[i]], "%d") %>% as.integer()
changed
if(changed) {
print("read the brick")
# read the brick --> this should not be done each time in the loop!!
raster_brick = raster::brick(right_path)
if ((m == format(dates_to_extract[[i + 1]], "%m"))) {
changed = FALSE
} else{
changed = TRUE
}
} else{
print("no change --> dont read the brick")
}
changed
i = 2
# month of the date to extract
m = format(dates_to_extract[[i]], "%m")
y = format(dates_to_extract[[i]], "%y")
d = format(dates_to_extract[[i]], "%d")
# check based on the month
right_path = paths_to_data[grep(m, names(paths_to_data))]
# open the connection
ncin = ncdf4::nc_open(right_path[[1]])
# dates for this month
dates = get_dates_ncdf(ncin)
# get the index to extract
idx = format(dates_to_extract[[i]], "%d") %>% as.integer()
if(changed) {
print("read the brick")
# read the brick --> this should not be done each time in the loop!!
raster_brick = raster::brick(right_path)
if ((m == format(dates_to_extract[[i + 1]], "%m"))) {
changed = FALSE
} else{
changed = TRUE
}
} else{
print("no change --> dont read the brick")
}
length(dates_to_extract)
i = 16
raster_list = get_raster_list_one_month(d, days_back, dates_nc, paths_to_data)
raster_list = get_raster_list_n_month(paths_to_data, day, days_back)
raster_list
raster_list[[1]]
plot(raster_list[[1]])
plot(raster_list[[3]])
plot(raster_list[[5]])
plot(raster_list[[7]])
plot(raster_list[[9]])
plot(raster_list[[12]])
plot(raster_list[[13]])
plot(raster_list[[1]])
plot(raster_list[[14]])
plot(raster_list[[15]])
plot(raster_list[[16]])
m = 3
i = 3
# month of the date to extract
m = format(dates_to_extract[[i]], "%m")
y = format(dates_to_extract[[i]], "%y")
d = format(dates_to_extract[[i]], "%d")
d
i = 4
# month of the date to extract
m = format(dates_to_extract[[i]], "%m")
y = format(dates_to_extract[[i]], "%y")
d = format(dates_to_extract[[i]], "%d")
d
# check based on the month
right_path = paths_to_data[grep(m, names(paths_to_data))]
# open the connection
ncin = ncdf4::nc_open(right_path[[1]])
# dates for this month
dates = get_dates_ncdf(ncin)
# get the index to extract
idx = format(dates_to_extract[[i]], "%d") %>% as.integer()
idx
changed
i
if (changed) {
print("read the brick")
# read the brick --> this should not be done each time in the loop!!
raster_brick = raster::brick(right_path)
}
m == format(dates_to_extract[[i + 1]], "%m")
devtools::load_all()
day
days_back
raster_list = get_raster_list_n_month(paths_to_data, day, days_back)
raster_list = get_raster_list_n_month(paths_to_data, day, days_back)
devtools::load_all()
devtools::load_all()
raster_list = get_raster_list_n_month(paths_to_data, day, days_back)
devtools::load_all()
devtools::load_all()
raster_list = get_raster_list_n_month(paths_to_data, day, days_back)
length(dates_to_extract)
i = 15
i!=length(dates_to_extract)-1
devtools::load_all()
raster_list = get_raster_list_n_month(paths_to_data, day, days_back)
i
changed
if (changed) {
print(paste0("read the brick for: ", m, " ", y))
# read the brick --> this should not be done each time in the loop!!
raster_brick = raster::brick(right_path)
}
# up to the second last one (-1)
if(i!=length(dates_to_extract)-1){
if ((m == format(dates_to_extract[[i + 1]], "%m"))) {
changed = FALSE
# print("no change --> dont read the brick")
} else{
changed = TRUE
}
}
devtools::load_all()
raster_list = get_raster_list_n_month(paths_to_data, day, days_back)
raster_brick
raster_list
paths_to_data
p = paths_to_data[[1]]
rs = raster(p)
plot(rs[[12]])
rs
rs = brick(p)
plot(rs[[12]])
plot(raster_list[[16]])
plot(raster_list[[16]])
plot(raster_list[[15]])
plot(raster_list[[14]])
plot(raster_list[[13]])
plot(raster_list[[12]])
plot(raster_list[[11]])
names(raster_list)
p = paths_to_data[[2]]
rs = stack(p)
paths_to_data
p
rs = stack(o)
rs = stack(p)
plot(rs[[28]])
plot(raster_list[[1]])
raster_list
length(raster_list)
spatial.obj
sptial.obj = spatial.obj[1,]
spastial.obk
spastial.obj
spatial.obj
spatial.obj = spatial.obj[1,]
spatial.obj
raster_list
a = raster::extract(raster_list, spatial.obj)
a = sapply(raster_list, function(x) raster::extract(x, spatial.obj))
a
a = sapply(raster_list, function(x) raster::extract(x, spatial.obj, xy=T))
?raster::extract
a = sapply(raster_list, function(x) raster::extract(x, spatial.obj, sp=T))
a
library(exactextractr)
a = sapply(raster_list, function(x) exact_extract(x, spatial.obj))
?exact_extract
# ectract the spatial data
day_data_frame = sapply(raster_list, function(x) raster::extract())
# ectract the spatial data
day_data_frame = sapply(raster_list, function(x) raster::extract(x, spatial.obj))
day_data_frame
# ectract the spatial data
day_data_frame = sapply(raster_list, function(x){
raster::extract(x, spatial.obj, sp=T) %>% st_as_sf()
})
day_data_frame
class(day_data_frame)
?extract
raster::extract(x, spatial.obj, sp=T, df=T) %>% st_as_sf()
# ectract the spatial data
day_data_frame = sapply(raster_list, function(x){
raster::extract(x, spatial.obj, sp=T, df=T) %>% st_as_sf()
})
day_data_frame
class(day_data_frame)
raster::extract(x, spatial.obj, df=T) %>% st_as_sf()
# ectract the spatial data
day_data_frame = sapply(raster_list, function(x){
raster::extract(x, spatial.obj, df=T) %>% st_as_sf()
})
# ectract the spatial data
day_data_frame = sapply(raster_list, function(x){
raster::extract(x, spatial.obj, df=T)
})
day_data_frame
# ectract the spatial data
day_data_frame = sapply(raster_list, function(x){
raster::extract(x, spatial.obj, sp=T)
})
day_data_frame
# ectract the spatial data
day_data_frame = lapply(raster_list, function(x){
raster::extract(x, spatial.obj, sp=T) %>% st_as_sf()
})
day_data_frame
unlist(day_data_frame)
a = unlist(day_data_frame)
class(a)
a
# ectract the spatial data
day_data_frame = lapply(raster_list, function(x){
raster::extract(x, spatial.obj, sp=T) %>% st_as_sf()
}) %>% unlist()
day_data_frame
names(day_data_frame)
day_data_frame = lapply(raster_list, function(x){
raster::extract(x, spatial.obj, sp=T) %>% st_as_sf()
})
day_data_frame[[1]]
?bind_rows
bind_rows(day_data_frame)
b = bind_rows(day_data_frame)
class(b)
head(b)
dim(b)
day_data_frame
b = bind_cols(day_data_frame)
b
dim(b)
names(b)
?matches
b = bind_cols(day_data_frame) %>%
select(., matches("^x[12]\\d*_"))
b = bind_cols(day_data_frame) %>%
select(matches("^x[12]\\d*_"))
b = bind_cols(day_data_frame)
class(b)
b %>% select(starts_with("x"))
b = bind_cols(day_data_frame) %>%
dplyr::select(matches("^x[12]\\d*_"))
b
b = bind_cols(day_data_frame) %>%
dplyr::select(matches("^x[12]\\d*_")) %>%
dplyr::rename_with(substr(., 2, nchar(.)), starts_with("x"))
b = bind_cols(day_data_frame) %>%
dplyr::select(matches("^x[12]\\d*_")) %>%
rename_with(., ~ gsub("x", ""))
b = bind_cols(day_data_frame) %>%
dplyr::select(matches("^x[12]\\d*_")) %>%
rename_with(., ~ gsub(., "x", ""))
b = bind_cols(day_data_frame) %>%
dplyr::select(matches("^x[12]\\d*_")) %>%
rename_all(funs(stringr::str_replace_all(., pattern = "x", "")))
b
b = bind_cols(day_data_frame) %>%
dplyr::select(matches("^x[12]\\d*_")) %>%
rename_all(funs(stringr::str_replace_all(., pattern = "X", "")))
b
# ectract the spatial data
day_data_frame = lapply(raster_list, function(x){
raster::extract(x, spatial.obj, sp=T) %>% st_as_sf()
})
day_data_frame
b = bind_cols(day_data_frame)
b
b = bind_cols(day_data_frame) %>%
dplyr::select(matches("(^x[12]\\d*_)|geom"))
b
names(b)
names(b) %>% View()
geom = b %>% select(matches("geom"))
geom = b %>% dplyr::select(matches("geom"))
geom
geom = b %>% dplyr::select(matches("geom")) %>% pull(1)
geom
b = b %>% dplyr::select(matches("(^x[12]\\d*_)"))
b
b = b %>% dplyr::select(matches("(^x[12]\\d*_)")) %>%
rename_all(funs(stringr::str_replace_all(., pattern = "X", "")))
b
?st_as_sf
b[["geometry"]] = geom
class(b)
b
b = st_as_sf(b)
b
vlassb
class(b)
plot(b)
plot(st_geometry(b))
mapview::mapview(b)
out
day
counter
counter = 1
coounter += 1
counter = counter + 1
counter
library(rainfallR)
data_path="\\\\projectdata.eurac.edu/projects/Proslide/PREC_GRIDS/"
path = "\\\\projectdata.eurac.edu/projects/Proslide/Landslides/Iffi_db_xxxx_to_2018/exportperEurac2020/Shapefiles/IFFI10_1.shp"
spatial.obj = st_read(path)
devtools::load_all()
spatial.obj = st_read(path)
dts = c(as.Date("2016-01-12"), as.Date("2016-01-14"))
res = get_rainfall(spatial.obj = spatial.obj,
dts=dts)
res
print("Accessing these NetCDF-files: ", paths_to_data)
message("Accessing these NetCDF-files: ", paths_to_data)
devtools::load_all()
res = get_rainfall(spatial.obj = spatial.obj,
dts=dts)
dts
res
class(res)
dim(res)
length(res)
